<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="821.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="821.00"> </text><svg id="frames" x="10" width="1180"><g><title>perf (2 samples, 0.06%)</title><rect x="0.0000%" y="773" width="0.0636%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.0000%" y="757" width="0.0636%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.0000%" y="741" width="0.0636%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.0000%" y="725" width="0.0636%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.0000%" y="709" width="0.0636%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.0000%" y="693" width="0.0636%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.0000%" y="677" width="0.0636%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.0000%" y="661" width="0.0636%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.0000%" y="645" width="0.0636%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.0000%" y="629" width="0.0636%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.0000%" y="613" width="0.0636%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.0000%" y="597" width="0.0636%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.0000%" y="581" width="0.0636%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="591.50"></text></g><g><title>[[heap]] (1 samples, 0.03%)</title><rect x="0.0636%" y="757" width="0.0318%" height="15" fill="rgb(206,188,39)"/><text x="0.3136%" y="767.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="0.0636%" y="741" width="0.0318%" height="15" fill="rgb(217,207,13)"/><text x="0.3136%" y="751.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="0.0636%" y="725" width="0.0318%" height="15" fill="rgb(231,73,38)"/><text x="0.3136%" y="735.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="0.0636%" y="709" width="0.0318%" height="15" fill="rgb(225,20,46)"/><text x="0.3136%" y="719.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="0.0636%" y="693" width="0.0318%" height="15" fill="rgb(210,31,41)"/><text x="0.3136%" y="703.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="0.0636%" y="677" width="0.0318%" height="15" fill="rgb(221,200,47)"/><text x="0.3136%" y="687.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="0.0636%" y="661" width="0.0318%" height="15" fill="rgb(226,26,5)"/><text x="0.3136%" y="671.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="0.0636%" y="645" width="0.0318%" height="15" fill="rgb(249,33,26)"/><text x="0.3136%" y="655.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="0.0636%" y="629" width="0.0318%" height="15" fill="rgb(235,183,28)"/><text x="0.3136%" y="639.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.03%)</title><rect x="0.0636%" y="613" width="0.0318%" height="15" fill="rgb(221,5,38)"/><text x="0.3136%" y="623.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="0.0636%" y="597" width="0.0318%" height="15" fill="rgb(247,18,42)"/><text x="0.3136%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.0636%" y="581" width="0.0318%" height="15" fill="rgb(241,131,45)"/><text x="0.3136%" y="591.50"></text></g><g><title>[[stack]] (1 samples, 0.03%)</title><rect x="0.0954%" y="757" width="0.0318%" height="15" fill="rgb(249,31,29)"/><text x="0.3454%" y="767.50"></text></g><g><title>__libc_write (1 samples, 0.03%)</title><rect x="0.0954%" y="741" width="0.0318%" height="15" fill="rgb(225,111,53)"/><text x="0.3454%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.0954%" y="725" width="0.0318%" height="15" fill="rgb(238,160,17)"/><text x="0.3454%" y="735.50"></text></g><g><title>[unknown] (15 samples, 0.48%)</title><rect x="0.1590%" y="741" width="0.4769%" height="15" fill="rgb(214,148,48)"/><text x="0.4090%" y="751.50"></text></g><g><title>[unknown] (15 samples, 0.48%)</title><rect x="0.1590%" y="725" width="0.4769%" height="15" fill="rgb(232,36,49)"/><text x="0.4090%" y="735.50"></text></g><g><title>[unknown] (15 samples, 0.48%)</title><rect x="0.1590%" y="709" width="0.4769%" height="15" fill="rgb(209,103,24)"/><text x="0.4090%" y="719.50"></text></g><g><title>[unknown] (15 samples, 0.48%)</title><rect x="0.1590%" y="693" width="0.4769%" height="15" fill="rgb(229,88,8)"/><text x="0.4090%" y="703.50"></text></g><g><title>[unknown] (15 samples, 0.48%)</title><rect x="0.1590%" y="677" width="0.4769%" height="15" fill="rgb(213,181,19)"/><text x="0.4090%" y="687.50"></text></g><g><title>[unknown] (15 samples, 0.48%)</title><rect x="0.1590%" y="661" width="0.4769%" height="15" fill="rgb(254,191,54)"/><text x="0.4090%" y="671.50"></text></g><g><title>[unknown] (15 samples, 0.48%)</title><rect x="0.1590%" y="645" width="0.4769%" height="15" fill="rgb(241,83,37)"/><text x="0.4090%" y="655.50"></text></g><g><title>[unknown] (15 samples, 0.48%)</title><rect x="0.1590%" y="629" width="0.4769%" height="15" fill="rgb(233,36,39)"/><text x="0.4090%" y="639.50"></text></g><g><title>[unknown] (15 samples, 0.48%)</title><rect x="0.1590%" y="613" width="0.4769%" height="15" fill="rgb(226,3,54)"/><text x="0.4090%" y="623.50"></text></g><g><title>[unknown] (15 samples, 0.48%)</title><rect x="0.1590%" y="597" width="0.4769%" height="15" fill="rgb(245,192,40)"/><text x="0.4090%" y="607.50"></text></g><g><title>[unknown] (9 samples, 0.29%)</title><rect x="0.3498%" y="581" width="0.2862%" height="15" fill="rgb(238,167,29)"/><text x="0.5998%" y="591.50"></text></g><g><title>[unknown] (7 samples, 0.22%)</title><rect x="0.4134%" y="565" width="0.2226%" height="15" fill="rgb(232,182,51)"/><text x="0.6634%" y="575.50"></text></g><g><title>[unknown] (4 samples, 0.13%)</title><rect x="0.5087%" y="549" width="0.1272%" height="15" fill="rgb(231,60,39)"/><text x="0.7587%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.5723%" y="533" width="0.0636%" height="15" fill="rgb(208,69,12)"/><text x="0.8223%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.6041%" y="517" width="0.0318%" height="15" fill="rgb(235,93,37)"/><text x="0.8541%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.6041%" y="501" width="0.0318%" height="15" fill="rgb(213,116,39)"/><text x="0.8541%" y="511.50"></text></g><g><title>__libc_write (2 samples, 0.06%)</title><rect x="0.6359%" y="741" width="0.0636%" height="15" fill="rgb(222,207,29)"/><text x="0.8859%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.6359%" y="725" width="0.0636%" height="15" fill="rgb(206,96,30)"/><text x="0.8859%" y="735.50"></text></g><g><title>[unknown] (19 samples, 0.60%)</title><rect x="0.1272%" y="757" width="0.6041%" height="15" fill="rgb(218,138,4)"/><text x="0.3772%" y="767.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="0.6995%" y="741" width="0.0318%" height="15" fill="rgb(250,191,14)"/><text x="0.9495%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.6995%" y="725" width="0.0318%" height="15" fill="rgb(239,60,40)"/><text x="0.9495%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.06%)</title><rect x="0.7313%" y="389" width="0.0636%" height="15" fill="rgb(206,27,48)"/><text x="0.9813%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (22 samples, 0.70%)</title><rect x="0.7313%" y="421" width="0.6995%" height="15" fill="rgb(225,35,8)"/><text x="0.9813%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (22 samples, 0.70%)</title><rect x="0.7313%" y="405" width="0.6995%" height="15" fill="rgb(250,213,24)"/><text x="0.9813%" y="415.50"></text></g><g><title>core::ptr::write (20 samples, 0.64%)</title><rect x="0.7949%" y="389" width="0.6359%" height="15" fill="rgb(247,123,22)"/><text x="1.0449%" y="399.50"></text></g><g><title>[unknown] (6 samples, 0.19%)</title><rect x="1.2401%" y="373" width="0.1908%" height="15" fill="rgb(231,138,38)"/><text x="1.4901%" y="383.50"></text></g><g><title>[unknown] (6 samples, 0.19%)</title><rect x="1.2401%" y="357" width="0.1908%" height="15" fill="rgb(231,145,46)"/><text x="1.4901%" y="367.50"></text></g><g><title>[unknown] (6 samples, 0.19%)</title><rect x="1.2401%" y="341" width="0.1908%" height="15" fill="rgb(251,118,11)"/><text x="1.4901%" y="351.50"></text></g><g><title>[unknown] (6 samples, 0.19%)</title><rect x="1.2401%" y="325" width="0.1908%" height="15" fill="rgb(217,147,25)"/><text x="1.4901%" y="335.50"></text></g><g><title>[unknown] (6 samples, 0.19%)</title><rect x="1.2401%" y="309" width="0.1908%" height="15" fill="rgb(247,81,37)"/><text x="1.4901%" y="319.50"></text></g><g><title>[unknown] (6 samples, 0.19%)</title><rect x="1.2401%" y="293" width="0.1908%" height="15" fill="rgb(209,12,38)"/><text x="1.4901%" y="303.50"></text></g><g><title>[unknown] (4 samples, 0.13%)</title><rect x="1.3037%" y="277" width="0.1272%" height="15" fill="rgb(227,1,9)"/><text x="1.5537%" y="287.50"></text></g><g><title>[unknown] (4 samples, 0.13%)</title><rect x="1.3037%" y="261" width="0.1272%" height="15" fill="rgb(248,47,43)"/><text x="1.5537%" y="271.50"></text></g><g><title>[unknown] (4 samples, 0.13%)</title><rect x="1.3037%" y="245" width="0.1272%" height="15" fill="rgb(221,10,30)"/><text x="1.5537%" y="255.50"></text></g><g><title>[unknown] (4 samples, 0.13%)</title><rect x="1.3037%" y="229" width="0.1272%" height="15" fill="rgb(210,229,1)"/><text x="1.5537%" y="239.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="1.3355%" y="213" width="0.0954%" height="15" fill="rgb(222,148,37)"/><text x="1.5855%" y="223.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.03%)</title><rect x="1.4308%" y="373" width="0.0318%" height="15" fill="rgb(234,67,33)"/><text x="1.6808%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.13%)</title><rect x="1.4944%" y="341" width="0.1272%" height="15" fill="rgb(247,98,35)"/><text x="1.7444%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (4 samples, 0.13%)</title><rect x="1.4944%" y="325" width="0.1272%" height="15" fill="rgb(247,138,52)"/><text x="1.7444%" y="335.50"></text></g><g><title>&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.13%)</title><rect x="1.4944%" y="309" width="0.1272%" height="15" fill="rgb(213,79,30)"/><text x="1.7444%" y="319.50"></text></g><g><title>&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.13%)</title><rect x="1.4944%" y="293" width="0.1272%" height="15" fill="rgb(246,177,23)"/><text x="1.7444%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.10%)</title><rect x="1.5262%" y="277" width="0.0954%" height="15" fill="rgb(230,62,27)"/><text x="1.7762%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.06%)</title><rect x="1.5580%" y="261" width="0.0636%" height="15" fill="rgb(216,154,8)"/><text x="1.8080%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.06%)</title><rect x="1.5580%" y="245" width="0.0636%" height="15" fill="rgb(244,35,45)"/><text x="1.8080%" y="255.50"></text></g><g><title>&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="1.6216%" y="341" width="0.0318%" height="15" fill="rgb(251,115,12)"/><text x="1.8716%" y="351.50"></text></g><g><title>&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="1.6216%" y="325" width="0.0318%" height="15" fill="rgb(240,54,50)"/><text x="1.8716%" y="335.50"></text></g><g><title>&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.03%)</title><rect x="1.6534%" y="341" width="0.0318%" height="15" fill="rgb(233,84,52)"/><text x="1.9034%" y="351.50"></text></g><g><title>&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.03%)</title><rect x="1.6534%" y="325" width="0.0318%" height="15" fill="rgb(207,117,47)"/><text x="1.9034%" y="335.50"></text></g><g><title>[unknown] (13 samples, 0.41%)</title><rect x="2.2576%" y="197" width="0.4134%" height="15" fill="rgb(249,43,39)"/><text x="2.5076%" y="207.50"></text></g><g><title>[unknown] (12 samples, 0.38%)</title><rect x="2.2893%" y="181" width="0.3816%" height="15" fill="rgb(209,38,44)"/><text x="2.5393%" y="191.50"></text></g><g><title>[unknown] (12 samples, 0.38%)</title><rect x="2.2893%" y="165" width="0.3816%" height="15" fill="rgb(236,212,23)"/><text x="2.5393%" y="175.50"></text></g><g><title>[unknown] (12 samples, 0.38%)</title><rect x="2.2893%" y="149" width="0.3816%" height="15" fill="rgb(242,79,21)"/><text x="2.5393%" y="159.50"></text></g><g><title>[unknown] (12 samples, 0.38%)</title><rect x="2.2893%" y="133" width="0.3816%" height="15" fill="rgb(211,96,35)"/><text x="2.5393%" y="143.50"></text></g><g><title>[unknown] (12 samples, 0.38%)</title><rect x="2.2893%" y="117" width="0.3816%" height="15" fill="rgb(253,215,40)"/><text x="2.5393%" y="127.50"></text></g><g><title>[unknown] (11 samples, 0.35%)</title><rect x="2.3211%" y="101" width="0.3498%" height="15" fill="rgb(211,81,21)"/><text x="2.5711%" y="111.50"></text></g><g><title>[unknown] (11 samples, 0.35%)</title><rect x="2.3211%" y="85" width="0.3498%" height="15" fill="rgb(208,190,38)"/><text x="2.5711%" y="95.50"></text></g><g><title>[unknown] (10 samples, 0.32%)</title><rect x="2.3529%" y="69" width="0.3180%" height="15" fill="rgb(235,213,38)"/><text x="2.6029%" y="79.50"></text></g><g><title>[unknown] (10 samples, 0.32%)</title><rect x="2.3529%" y="53" width="0.3180%" height="15" fill="rgb(237,122,38)"/><text x="2.6029%" y="63.50"></text></g><g><title>[unknown] (10 samples, 0.32%)</title><rect x="2.3529%" y="37" width="0.3180%" height="15" fill="rgb(244,218,35)"/><text x="2.6029%" y="47.50"></text></g><g><title>alloc_perturb (3 samples, 0.10%)</title><rect x="2.6709%" y="197" width="0.0954%" height="15" fill="rgb(240,68,47)"/><text x="2.9209%" y="207.50"></text></g><g><title>__GI___libc_malloc (35 samples, 1.11%)</title><rect x="1.6852%" y="229" width="1.1129%" height="15" fill="rgb(210,16,53)"/><text x="1.9352%" y="239.50"></text></g><g><title>_int_malloc (32 samples, 1.02%)</title><rect x="1.7806%" y="213" width="1.0175%" height="15" fill="rgb(235,124,12)"/><text x="2.0306%" y="223.50"></text></g><g><title>checked_request2size (1 samples, 0.03%)</title><rect x="2.7663%" y="197" width="0.0318%" height="15" fill="rgb(224,169,11)"/><text x="3.0163%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (36 samples, 1.14%)</title><rect x="1.6852%" y="341" width="1.1447%" height="15" fill="rgb(250,166,2)"/><text x="1.9352%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (36 samples, 1.14%)</title><rect x="1.6852%" y="325" width="1.1447%" height="15" fill="rgb(242,216,29)"/><text x="1.9352%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (36 samples, 1.14%)</title><rect x="1.6852%" y="309" width="1.1447%" height="15" fill="rgb(230,116,27)"/><text x="1.9352%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (36 samples, 1.14%)</title><rect x="1.6852%" y="293" width="1.1447%" height="15" fill="rgb(228,99,48)"/><text x="1.9352%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (36 samples, 1.14%)</title><rect x="1.6852%" y="277" width="1.1447%" height="15" fill="rgb(253,11,6)"/><text x="1.9352%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (36 samples, 1.14%)</title><rect x="1.6852%" y="261" width="1.1447%" height="15" fill="rgb(247,143,39)"/><text x="1.9352%" y="271.50"></text></g><g><title>alloc::alloc::alloc (36 samples, 1.14%)</title><rect x="1.6852%" y="245" width="1.1447%" height="15" fill="rgb(236,97,10)"/><text x="1.9352%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="2.7981%" y="229" width="0.0318%" height="15" fill="rgb(233,208,19)"/><text x="3.0481%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (45 samples, 1.43%)</title><rect x="1.4308%" y="405" width="1.4308%" height="15" fill="rgb(216,164,2)"/><text x="1.6808%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (45 samples, 1.43%)</title><rect x="1.4308%" y="389" width="1.4308%" height="15" fill="rgb(220,129,5)"/><text x="1.6808%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (44 samples, 1.40%)</title><rect x="1.4626%" y="373" width="1.3990%" height="15" fill="rgb(242,17,10)"/><text x="1.7126%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (44 samples, 1.40%)</title><rect x="1.4626%" y="357" width="1.3990%" height="15" fill="rgb(242,107,0)"/><text x="1.7126%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_add (1 samples, 0.03%)</title><rect x="2.8299%" y="341" width="0.0318%" height="15" fill="rgb(251,28,31)"/><text x="3.0799%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.06%)</title><rect x="2.8617%" y="325" width="0.0636%" height="15" fill="rgb(233,223,10)"/><text x="3.1117%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.06%)</title><rect x="2.8617%" y="309" width="0.0636%" height="15" fill="rgb(215,21,27)"/><text x="3.1117%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (96 samples, 3.05%)</title><rect x="0.7313%" y="565" width="3.0525%" height="15" fill="rgb(232,23,21)"/><text x="0.9813%" y="575.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (96 samples, 3.05%)</title><rect x="0.7313%" y="549" width="3.0525%" height="15" fill="rgb(244,5,23)"/><text x="0.9813%" y="559.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (96 samples, 3.05%)</title><rect x="0.7313%" y="533" width="3.0525%" height="15" fill="rgb(226,81,46)"/><text x="0.9813%" y="543.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (96 samples, 3.05%)</title><rect x="0.7313%" y="517" width="3.0525%" height="15" fill="rgb(247,70,30)"/><text x="0.9813%" y="527.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (96 samples, 3.05%)</title><rect x="0.7313%" y="501" width="3.0525%" height="15" fill="rgb(212,68,19)"/><text x="0.9813%" y="511.50">&lt;al..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (96 samples, 3.05%)</title><rect x="0.7313%" y="485" width="3.0525%" height="15" fill="rgb(240,187,13)"/><text x="0.9813%" y="495.50">cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (96 samples, 3.05%)</title><rect x="0.7313%" y="469" width="3.0525%" height="15" fill="rgb(223,113,26)"/><text x="0.9813%" y="479.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (96 samples, 3.05%)</title><rect x="0.7313%" y="453" width="3.0525%" height="15" fill="rgb(206,192,2)"/><text x="0.9813%" y="463.50">cor..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (96 samples, 3.05%)</title><rect x="0.7313%" y="437" width="3.0525%" height="15" fill="rgb(241,108,4)"/><text x="0.9813%" y="447.50">cor..</text></g><g><title>qsv::main::{{closure}} (74 samples, 2.35%)</title><rect x="1.4308%" y="421" width="2.3529%" height="15" fill="rgb(247,173,49)"/><text x="1.6808%" y="431.50">q..</text></g><g><title>csv::string_record::StringRecord::iter (29 samples, 0.92%)</title><rect x="2.8617%" y="405" width="0.9221%" height="15" fill="rgb(224,114,35)"/><text x="3.1117%" y="415.50"></text></g><g><title>&lt;&amp;csv::string_record::StringRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (29 samples, 0.92%)</title><rect x="2.8617%" y="389" width="0.9221%" height="15" fill="rgb(245,159,27)"/><text x="3.1117%" y="399.50"></text></g><g><title>csv::byte_record::ByteRecord::iter (29 samples, 0.92%)</title><rect x="2.8617%" y="373" width="0.9221%" height="15" fill="rgb(245,172,44)"/><text x="3.1117%" y="383.50"></text></g><g><title>&lt;&amp;csv::byte_record::ByteRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (29 samples, 0.92%)</title><rect x="2.8617%" y="357" width="0.9221%" height="15" fill="rgb(236,23,11)"/><text x="3.1117%" y="367.50"></text></g><g><title>csv::byte_record::ByteRecord::as_slice (29 samples, 0.92%)</title><rect x="2.8617%" y="341" width="0.9221%" height="15" fill="rgb(205,117,38)"/><text x="3.1117%" y="351.50"></text></g><g><title>csv::byte_record::Bounds::end (27 samples, 0.86%)</title><rect x="2.9253%" y="325" width="0.8585%" height="15" fill="rgb(237,72,25)"/><text x="3.1753%" y="335.50"></text></g><g><title>csv::byte_record::Bounds::ends (27 samples, 0.86%)</title><rect x="2.9253%" y="309" width="0.8585%" height="15" fill="rgb(244,70,9)"/><text x="3.1753%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (27 samples, 0.86%)</title><rect x="2.9253%" y="293" width="0.8585%" height="15" fill="rgb(217,125,39)"/><text x="3.1753%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (27 samples, 0.86%)</title><rect x="2.9253%" y="277" width="0.8585%" height="15" fill="rgb(235,36,10)"/><text x="3.1753%" y="287.50"></text></g><g><title>__rust_dealloc (1 samples, 0.03%)</title><rect x="3.7838%" y="405" width="0.0318%" height="15" fill="rgb(251,123,47)"/><text x="4.0338%" y="415.50"></text></g><g><title>alloc::alloc::box_free (4 samples, 0.13%)</title><rect x="3.7838%" y="453" width="0.1272%" height="15" fill="rgb(221,13,13)"/><text x="4.0338%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.13%)</title><rect x="3.7838%" y="437" width="0.1272%" height="15" fill="rgb(238,131,9)"/><text x="4.0338%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.13%)</title><rect x="3.7838%" y="421" width="0.1272%" height="15" fill="rgb(211,50,8)"/><text x="4.0338%" y="431.50"></text></g><g><title>_int_free (3 samples, 0.10%)</title><rect x="3.8156%" y="405" width="0.0954%" height="15" fill="rgb(245,182,24)"/><text x="4.0656%" y="415.50"></text></g><g><title>__GI___libc_free (13 samples, 0.41%)</title><rect x="3.9110%" y="357" width="0.4134%" height="15" fill="rgb(242,14,37)"/><text x="4.1610%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 0.76%)</title><rect x="3.9110%" y="389" width="0.7631%" height="15" fill="rgb(246,228,12)"/><text x="4.1610%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.76%)</title><rect x="3.9110%" y="373" width="0.7631%" height="15" fill="rgb(213,55,15)"/><text x="4.1610%" y="383.50"></text></g><g><title>_int_free (11 samples, 0.35%)</title><rect x="4.3243%" y="357" width="0.3498%" height="15" fill="rgb(209,9,3)"/><text x="4.5743%" y="367.50"></text></g><g><title>free_perturb (1 samples, 0.03%)</title><rect x="4.6423%" y="341" width="0.0318%" height="15" fill="rgb(230,59,30)"/><text x="4.8923%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (28 samples, 0.89%)</title><rect x="3.9110%" y="437" width="0.8903%" height="15" fill="rgb(209,121,21)"/><text x="4.1610%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (28 samples, 0.89%)</title><rect x="3.9110%" y="421" width="0.8903%" height="15" fill="rgb(220,109,13)"/><text x="4.1610%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.89%)</title><rect x="3.9110%" y="405" width="0.8903%" height="15" fill="rgb(232,18,1)"/><text x="4.1610%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.13%)</title><rect x="4.6741%" y="389" width="0.1272%" height="15" fill="rgb(215,41,42)"/><text x="4.9241%" y="399.50"></text></g><g><title>__GI___libc_free (3 samples, 0.10%)</title><rect x="4.9285%" y="341" width="0.0954%" height="15" fill="rgb(224,123,36)"/><text x="5.1785%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 1.49%)</title><rect x="3.7838%" y="533" width="1.4944%" height="15" fill="rgb(240,125,3)"/><text x="4.0338%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[csv::string_record::StringRecord]&gt; (47 samples, 1.49%)</title><rect x="3.7838%" y="517" width="1.4944%" height="15" fill="rgb(205,98,50)"/><text x="4.0338%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::string_record::StringRecord&gt; (47 samples, 1.49%)</title><rect x="3.7838%" y="501" width="1.4944%" height="15" fill="rgb(205,185,37)"/><text x="4.0338%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::ByteRecord&gt; (47 samples, 1.49%)</title><rect x="3.7838%" y="485" width="1.4944%" height="15" fill="rgb(238,207,15)"/><text x="4.0338%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;csv::byte_record::ByteRecordInner&gt;&gt; (47 samples, 1.49%)</title><rect x="3.7838%" y="469" width="1.4944%" height="15" fill="rgb(213,199,42)"/><text x="4.0338%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::ByteRecordInner&gt; (43 samples, 1.37%)</title><rect x="3.9110%" y="453" width="1.3672%" height="15" fill="rgb(235,201,11)"/><text x="4.1610%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::Bounds&gt; (15 samples, 0.48%)</title><rect x="4.8013%" y="437" width="0.4769%" height="15" fill="rgb(207,46,11)"/><text x="5.0513%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (15 samples, 0.48%)</title><rect x="4.8013%" y="421" width="0.4769%" height="15" fill="rgb(241,35,35)"/><text x="5.0513%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (15 samples, 0.48%)</title><rect x="4.8013%" y="405" width="0.4769%" height="15" fill="rgb(243,32,47)"/><text x="5.0513%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.48%)</title><rect x="4.8013%" y="389" width="0.4769%" height="15" fill="rgb(247,202,23)"/><text x="5.0513%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.41%)</title><rect x="4.8649%" y="373" width="0.4134%" height="15" fill="rgb(219,102,11)"/><text x="5.1149%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.41%)</title><rect x="4.8649%" y="357" width="0.4134%" height="15" fill="rgb(243,110,44)"/><text x="5.1149%" y="367.50"></text></g><g><title>_int_free (8 samples, 0.25%)</title><rect x="5.0238%" y="341" width="0.2544%" height="15" fill="rgb(222,74,54)"/><text x="5.2738%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;qsv::csv::csv_data::CsvData&gt; (48 samples, 1.53%)</title><rect x="3.7838%" y="565" width="1.5262%" height="15" fill="rgb(216,99,12)"/><text x="4.0338%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;csv::string_record::StringRecord&gt;&gt; (48 samples, 1.53%)</title><rect x="3.7838%" y="549" width="1.5262%" height="15" fill="rgb(226,22,26)"/><text x="4.0338%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;csv::string_record::StringRecord&gt;&gt; (1 samples, 0.03%)</title><rect x="5.2782%" y="533" width="0.0318%" height="15" fill="rgb(217,163,10)"/><text x="5.5282%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="5.2782%" y="517" width="0.0318%" height="15" fill="rgb(213,25,53)"/><text x="5.5282%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="5.2782%" y="501" width="0.0318%" height="15" fill="rgb(252,105,26)"/><text x="5.5282%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="5.2782%" y="485" width="0.0318%" height="15" fill="rgb(220,39,43)"/><text x="5.5282%" y="495.50"></text></g><g><title>__GI_munmap (1 samples, 0.03%)</title><rect x="5.2782%" y="469" width="0.0318%" height="15" fill="rgb(229,68,48)"/><text x="5.5282%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="5.2782%" y="453" width="0.0318%" height="15" fill="rgb(252,8,32)"/><text x="5.5282%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="5.2782%" y="437" width="0.0318%" height="15" fill="rgb(223,20,43)"/><text x="5.5282%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="5.2782%" y="421" width="0.0318%" height="15" fill="rgb(229,81,49)"/><text x="5.5282%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="5.2782%" y="405" width="0.0318%" height="15" fill="rgb(236,28,36)"/><text x="5.5282%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="5.2782%" y="389" width="0.0318%" height="15" fill="rgb(249,185,26)"/><text x="5.5282%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="5.2782%" y="373" width="0.0318%" height="15" fill="rgb(249,174,33)"/><text x="5.5282%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="5.2782%" y="357" width="0.0318%" height="15" fill="rgb(233,201,37)"/><text x="5.5282%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="5.2782%" y="341" width="0.0318%" height="15" fill="rgb(221,78,26)"/><text x="5.5282%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="5.2782%" y="325" width="0.0318%" height="15" fill="rgb(250,127,30)"/><text x="5.5282%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="5.2782%" y="309" width="0.0318%" height="15" fill="rgb(230,49,44)"/><text x="5.5282%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="5.2782%" y="293" width="0.0318%" height="15" fill="rgb(229,67,23)"/><text x="5.5282%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;qsv::db::Db&gt; (1 samples, 0.03%)</title><rect x="5.3100%" y="565" width="0.0318%" height="15" fill="rgb(249,83,47)"/><text x="5.5600%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;rusqlite::Connection&gt; (1 samples, 0.03%)</title><rect x="5.3100%" y="549" width="0.0318%" height="15" fill="rgb(215,43,3)"/><text x="5.5600%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;rusqlite::inner_connection::InnerConnection&gt;&gt; (1 samples, 0.03%)</title><rect x="5.3100%" y="533" width="0.0318%" height="15" fill="rgb(238,154,13)"/><text x="5.5600%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;rusqlite::inner_connection::InnerConnection&gt;&gt; (1 samples, 0.03%)</title><rect x="5.3100%" y="517" width="0.0318%" height="15" fill="rgb(219,56,2)"/><text x="5.5600%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;rusqlite::inner_connection::InnerConnection&gt; (1 samples, 0.03%)</title><rect x="5.3100%" y="501" width="0.0318%" height="15" fill="rgb(233,0,4)"/><text x="5.5600%" y="511.50"></text></g><g><title>&lt;rusqlite::inner_connection::InnerConnection as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="5.3100%" y="485" width="0.0318%" height="15" fill="rgb(235,30,7)"/><text x="5.5600%" y="495.50"></text></g><g><title>rusqlite::inner_connection::InnerConnection::close (1 samples, 0.03%)</title><rect x="5.3100%" y="469" width="0.0318%" height="15" fill="rgb(250,79,13)"/><text x="5.5600%" y="479.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="5.3100%" y="453" width="0.0318%" height="15" fill="rgb(211,146,34)"/><text x="5.5600%" y="463.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="5.3100%" y="437" width="0.0318%" height="15" fill="rgb(228,22,38)"/><text x="5.5600%" y="447.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="5.3100%" y="421" width="0.0318%" height="15" fill="rgb(235,168,5)"/><text x="5.5600%" y="431.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="5.3100%" y="405" width="0.0318%" height="15" fill="rgb(221,155,16)"/><text x="5.5600%" y="415.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="5.3100%" y="389" width="0.0318%" height="15" fill="rgb(215,215,53)"/><text x="5.5600%" y="399.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="5.3100%" y="373" width="0.0318%" height="15" fill="rgb(223,4,10)"/><text x="5.5600%" y="383.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="5.3100%" y="357" width="0.0318%" height="15" fill="rgb(234,103,6)"/><text x="5.5600%" y="367.50"></text></g><g><title>sqlite3_free (1 samples, 0.03%)</title><rect x="5.3100%" y="341" width="0.0318%" height="15" fill="rgb(227,97,0)"/><text x="5.5600%" y="351.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="5.3100%" y="325" width="0.0318%" height="15" fill="rgb(234,150,53)"/><text x="5.5600%" y="335.50"></text></g><g><title>csv::Trim::should_trim_fields (2 samples, 0.06%)</title><rect x="5.5008%" y="517" width="0.0636%" height="15" fill="rgb(228,201,54)"/><text x="5.7508%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="5.6916%" y="485" width="0.0318%" height="15" fill="rgb(222,22,37)"/><text x="5.9416%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="5.6916%" y="469" width="0.0318%" height="15" fill="rgb(237,53,32)"/><text x="5.9416%" y="479.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::is_ascii (5 samples, 0.16%)</title><rect x="5.7234%" y="485" width="0.1590%" height="15" fill="rgb(233,25,53)"/><text x="5.9734%" y="495.50"></text></g><g><title>core::slice::ascii::is_ascii (5 samples, 0.16%)</title><rect x="5.7234%" y="469" width="0.1590%" height="15" fill="rgb(210,40,34)"/><text x="5.9734%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.03%)</title><rect x="5.8824%" y="469" width="0.0318%" height="15" fill="rgb(241,220,44)"/><text x="6.1324%" y="479.50"></text></g><g><title>csv::byte_record::ByteRecord::validate (9 samples, 0.29%)</title><rect x="5.6598%" y="501" width="0.2862%" height="15" fill="rgb(235,28,35)"/><text x="5.9098%" y="511.50"></text></g><g><title>csv::byte_record::Bounds::end (2 samples, 0.06%)</title><rect x="5.8824%" y="485" width="0.0636%" height="15" fill="rgb(210,56,17)"/><text x="6.1324%" y="495.50"></text></g><g><title>csv::byte_record::Bounds::ends (1 samples, 0.03%)</title><rect x="5.9141%" y="469" width="0.0318%" height="15" fill="rgb(224,130,29)"/><text x="6.1641%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="5.9141%" y="453" width="0.0318%" height="15" fill="rgb(235,212,8)"/><text x="6.1641%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="5.9141%" y="437" width="0.0318%" height="15" fill="rgb(223,33,50)"/><text x="6.1641%" y="447.50"></text></g><g><title>csv::Trim::should_trim_fields (1 samples, 0.03%)</title><rect x="5.9777%" y="485" width="0.0318%" height="15" fill="rgb(219,149,13)"/><text x="6.2277%" y="495.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (2 samples, 0.06%)</title><rect x="6.0731%" y="469" width="0.0636%" height="15" fill="rgb(250,156,29)"/><text x="6.3231%" y="479.50"></text></g><g><title>core::cmp::min (1 samples, 0.03%)</title><rect x="6.1049%" y="453" width="0.0318%" height="15" fill="rgb(216,193,19)"/><text x="6.3549%" y="463.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.03%)</title><rect x="6.1049%" y="437" width="0.0318%" height="15" fill="rgb(216,135,14)"/><text x="6.3549%" y="447.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.03%)</title><rect x="6.1049%" y="421" width="0.0318%" height="15" fill="rgb(241,47,5)"/><text x="6.3549%" y="431.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (5 samples, 0.16%)</title><rect x="6.1367%" y="469" width="0.1590%" height="15" fill="rgb(233,42,35)"/><text x="6.3867%" y="479.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (5 samples, 0.16%)</title><rect x="6.1367%" y="453" width="0.1590%" height="15" fill="rgb(231,13,6)"/><text x="6.3867%" y="463.50"></text></g><g><title>std::sys::unix::fs::File::read (5 samples, 0.16%)</title><rect x="6.1367%" y="437" width="0.1590%" height="15" fill="rgb(207,181,40)"/><text x="6.3867%" y="447.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (5 samples, 0.16%)</title><rect x="6.1367%" y="421" width="0.1590%" height="15" fill="rgb(254,173,49)"/><text x="6.3867%" y="431.50"></text></g><g><title>__libc_read (5 samples, 0.16%)</title><rect x="6.1367%" y="405" width="0.1590%" height="15" fill="rgb(221,1,38)"/><text x="6.3867%" y="415.50"></text></g><g><title>[unknown] (5 samples, 0.16%)</title><rect x="6.1367%" y="389" width="0.1590%" height="15" fill="rgb(206,124,46)"/><text x="6.3867%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.16%)</title><rect x="6.1367%" y="373" width="0.1590%" height="15" fill="rgb(249,21,11)"/><text x="6.3867%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.16%)</title><rect x="6.1367%" y="357" width="0.1590%" height="15" fill="rgb(222,201,40)"/><text x="6.3867%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.16%)</title><rect x="6.1367%" y="341" width="0.1590%" height="15" fill="rgb(235,61,29)"/><text x="6.3867%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.16%)</title><rect x="6.1367%" y="325" width="0.1590%" height="15" fill="rgb(219,207,3)"/><text x="6.3867%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.16%)</title><rect x="6.1367%" y="309" width="0.1590%" height="15" fill="rgb(222,56,46)"/><text x="6.3867%" y="319.50"></text></g><g><title>[unknown] (5 samples, 0.16%)</title><rect x="6.1367%" y="293" width="0.1590%" height="15" fill="rgb(239,76,54)"/><text x="6.3867%" y="303.50"></text></g><g><title>[unknown] (5 samples, 0.16%)</title><rect x="6.1367%" y="277" width="0.1590%" height="15" fill="rgb(231,124,27)"/><text x="6.3867%" y="287.50"></text></g><g><title>[unknown] (4 samples, 0.13%)</title><rect x="6.1685%" y="261" width="0.1272%" height="15" fill="rgb(249,195,6)"/><text x="6.4185%" y="271.50"></text></g><g><title>[unknown] (4 samples, 0.13%)</title><rect x="6.1685%" y="245" width="0.1272%" height="15" fill="rgb(237,174,47)"/><text x="6.4185%" y="255.50"></text></g><g><title>[unknown] (4 samples, 0.13%)</title><rect x="6.1685%" y="229" width="0.1272%" height="15" fill="rgb(206,201,31)"/><text x="6.4185%" y="239.50"></text></g><g><title>[unknown] (4 samples, 0.13%)</title><rect x="6.1685%" y="213" width="0.1272%" height="15" fill="rgb(231,57,52)"/><text x="6.4185%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="6.2639%" y="197" width="0.0318%" height="15" fill="rgb(248,177,22)"/><text x="6.5139%" y="207.50"></text></g><g><title>csv::byte_record::ByteRecord::set_position (4 samples, 0.13%)</title><rect x="6.2957%" y="469" width="0.1272%" height="15" fill="rgb(215,211,37)"/><text x="6.5457%" y="479.50"></text></g><g><title>csv::byte_record::ByteRecord::len (1 samples, 0.03%)</title><rect x="6.5501%" y="453" width="0.0318%" height="15" fill="rgb(241,128,51)"/><text x="6.8001%" y="463.50"></text></g><g><title>csv::reader::ReaderState::add_record (6 samples, 0.19%)</title><rect x="6.4229%" y="469" width="0.1908%" height="15" fill="rgb(227,165,31)"/><text x="6.6729%" y="479.50"></text></g><g><title>csv::byte_record::Position::set_record (1 samples, 0.03%)</title><rect x="6.5819%" y="453" width="0.0318%" height="15" fill="rgb(228,167,24)"/><text x="6.8319%" y="463.50"></text></g><g><title>csv_core::reader::Reader::line (4 samples, 0.13%)</title><rect x="6.6137%" y="469" width="0.1272%" height="15" fill="rgb(228,143,12)"/><text x="6.8637%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="6.9316%" y="453" width="0.0318%" height="15" fill="rgb(249,149,8)"/><text x="7.1816%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="6.9316%" y="437" width="0.0318%" height="15" fill="rgb(243,35,44)"/><text x="7.1816%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="6.9316%" y="421" width="0.0318%" height="15" fill="rgb(246,89,9)"/><text x="7.1816%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="6.9316%" y="405" width="0.0318%" height="15" fill="rgb(233,213,13)"/><text x="7.1816%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="6.9316%" y="389" width="0.0318%" height="15" fill="rgb(233,141,41)"/><text x="7.1816%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="6.9316%" y="373" width="0.0318%" height="15" fill="rgb(239,167,4)"/><text x="7.1816%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="6.9316%" y="357" width="0.0318%" height="15" fill="rgb(209,217,16)"/><text x="7.1816%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="6.9316%" y="341" width="0.0318%" height="15" fill="rgb(219,88,35)"/><text x="7.1816%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="6.9316%" y="325" width="0.0318%" height="15" fill="rgb(220,193,23)"/><text x="7.1816%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="6.9316%" y="309" width="0.0318%" height="15" fill="rgb(230,90,52)"/><text x="7.1816%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="6.9316%" y="293" width="0.0318%" height="15" fill="rgb(252,106,19)"/><text x="7.1816%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="6.9316%" y="277" width="0.0318%" height="15" fill="rgb(206,74,20)"/><text x="7.1816%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="6.9316%" y="261" width="0.0318%" height="15" fill="rgb(230,138,44)"/><text x="7.1816%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="6.9316%" y="245" width="0.0318%" height="15" fill="rgb(235,182,43)"/><text x="7.1816%" y="255.50"></text></g><g><title>csv_core::reader::Dfa::get_output (4 samples, 0.13%)</title><rect x="7.4722%" y="437" width="0.1272%" height="15" fill="rgb(242,16,51)"/><text x="7.7222%" y="447.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_record (93 samples, 2.96%)</title><rect x="5.3736%" y="533" width="2.9571%" height="15" fill="rgb(248,9,4)"/><text x="5.6236%" y="543.50">csv..</text></g><g><title>csv::string_record::StringRecord::read (87 samples, 2.77%)</title><rect x="5.5644%" y="517" width="2.7663%" height="15" fill="rgb(210,31,22)"/><text x="5.8144%" y="527.50">cs..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (75 samples, 2.38%)</title><rect x="5.9459%" y="501" width="2.3847%" height="15" fill="rgb(239,54,39)"/><text x="6.1959%" y="511.50">cs..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (73 samples, 2.32%)</title><rect x="6.0095%" y="485" width="2.3211%" height="15" fill="rgb(230,99,41)"/><text x="6.2595%" y="495.50">c..</text></g><g><title>csv_core::reader::Reader::read_record (50 samples, 1.59%)</title><rect x="6.7409%" y="469" width="1.5898%" height="15" fill="rgb(253,106,12)"/><text x="6.9909%" y="479.50"></text></g><g><title>csv_core::reader::Reader::read_record_dfa (43 samples, 1.37%)</title><rect x="6.9634%" y="453" width="1.3672%" height="15" fill="rgb(213,46,41)"/><text x="7.2134%" y="463.50"></text></g><g><title>csv_core::reader::DfaClasses::scan_and_copy (23 samples, 0.73%)</title><rect x="7.5994%" y="437" width="0.7313%" height="15" fill="rgb(215,133,35)"/><text x="7.8494%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.06%)</title><rect x="8.3943%" y="501" width="0.0636%" height="15" fill="rgb(213,28,5)"/><text x="8.6443%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.06%)</title><rect x="8.3943%" y="485" width="0.0636%" height="15" fill="rgb(215,77,49)"/><text x="8.6443%" y="495.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="8.4579%" y="501" width="0.0318%" height="15" fill="rgb(248,100,22)"/><text x="8.7079%" y="511.50"></text></g><g><title>[unknown] (13 samples, 0.41%)</title><rect x="8.9666%" y="293" width="0.4134%" height="15" fill="rgb(208,67,9)"/><text x="9.2166%" y="303.50"></text></g><g><title>[unknown] (12 samples, 0.38%)</title><rect x="8.9984%" y="277" width="0.3816%" height="15" fill="rgb(219,133,21)"/><text x="9.2484%" y="287.50"></text></g><g><title>[unknown] (12 samples, 0.38%)</title><rect x="8.9984%" y="261" width="0.3816%" height="15" fill="rgb(246,46,29)"/><text x="9.2484%" y="271.50"></text></g><g><title>[unknown] (12 samples, 0.38%)</title><rect x="8.9984%" y="245" width="0.3816%" height="15" fill="rgb(246,185,52)"/><text x="9.2484%" y="255.50"></text></g><g><title>[unknown] (12 samples, 0.38%)</title><rect x="8.9984%" y="229" width="0.3816%" height="15" fill="rgb(252,136,11)"/><text x="9.2484%" y="239.50"></text></g><g><title>[unknown] (12 samples, 0.38%)</title><rect x="8.9984%" y="213" width="0.3816%" height="15" fill="rgb(219,138,53)"/><text x="9.2484%" y="223.50"></text></g><g><title>[unknown] (11 samples, 0.35%)</title><rect x="9.0302%" y="197" width="0.3498%" height="15" fill="rgb(211,51,23)"/><text x="9.2802%" y="207.50"></text></g><g><title>[unknown] (11 samples, 0.35%)</title><rect x="9.0302%" y="181" width="0.3498%" height="15" fill="rgb(247,221,28)"/><text x="9.2802%" y="191.50"></text></g><g><title>[unknown] (11 samples, 0.35%)</title><rect x="9.0302%" y="165" width="0.3498%" height="15" fill="rgb(251,222,45)"/><text x="9.2802%" y="175.50"></text></g><g><title>[unknown] (10 samples, 0.32%)</title><rect x="9.0620%" y="149" width="0.3180%" height="15" fill="rgb(217,162,53)"/><text x="9.3120%" y="159.50"></text></g><g><title>[unknown] (8 samples, 0.25%)</title><rect x="9.1256%" y="133" width="0.2544%" height="15" fill="rgb(229,93,14)"/><text x="9.3756%" y="143.50"></text></g><g><title>alloc_perturb (3 samples, 0.10%)</title><rect x="9.3800%" y="293" width="0.0954%" height="15" fill="rgb(209,67,49)"/><text x="9.6300%" y="303.50"></text></g><g><title>_int_malloc (27 samples, 0.86%)</title><rect x="8.6486%" y="309" width="0.8585%" height="15" fill="rgb(213,87,29)"/><text x="8.8986%" y="319.50"></text></g><g><title>checked_request2size (1 samples, 0.03%)</title><rect x="9.4754%" y="293" width="0.0318%" height="15" fill="rgb(205,151,52)"/><text x="9.7254%" y="303.50"></text></g><g><title>__GI___libc_malloc (33 samples, 1.05%)</title><rect x="8.4897%" y="325" width="1.0493%" height="15" fill="rgb(253,215,39)"/><text x="8.7397%" y="335.50"></text></g><g><title>checked_request2size (1 samples, 0.03%)</title><rect x="9.5072%" y="309" width="0.0318%" height="15" fill="rgb(221,220,41)"/><text x="9.7572%" y="319.50"></text></g><g><title>__rdl_alloc (5 samples, 0.16%)</title><rect x="9.5390%" y="325" width="0.1590%" height="15" fill="rgb(218,133,21)"/><text x="9.7890%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.13%)</title><rect x="9.5707%" y="309" width="0.1272%" height="15" fill="rgb(221,193,43)"/><text x="9.8207%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (39 samples, 1.24%)</title><rect x="8.4897%" y="421" width="1.2401%" height="15" fill="rgb(240,128,52)"/><text x="8.7397%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (39 samples, 1.24%)</title><rect x="8.4897%" y="405" width="1.2401%" height="15" fill="rgb(253,114,12)"/><text x="8.7397%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (39 samples, 1.24%)</title><rect x="8.4897%" y="389" width="1.2401%" height="15" fill="rgb(215,223,47)"/><text x="8.7397%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (39 samples, 1.24%)</title><rect x="8.4897%" y="373" width="1.2401%" height="15" fill="rgb(248,225,23)"/><text x="8.7397%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (39 samples, 1.24%)</title><rect x="8.4897%" y="357" width="1.2401%" height="15" fill="rgb(250,108,0)"/><text x="8.7397%" y="367.50"></text></g><g><title>alloc::alloc::alloc (39 samples, 1.24%)</title><rect x="8.4897%" y="341" width="1.2401%" height="15" fill="rgb(228,208,7)"/><text x="8.7397%" y="351.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="9.6979%" y="325" width="0.0318%" height="15" fill="rgb(244,45,10)"/><text x="9.9479%" y="335.50"></text></g><g><title>&lt;csv::byte_record::Bounds as core::clone::Clone&gt;::clone (40 samples, 1.27%)</title><rect x="8.4897%" y="501" width="1.2719%" height="15" fill="rgb(207,125,25)"/><text x="8.7397%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (40 samples, 1.27%)</title><rect x="8.4897%" y="485" width="1.2719%" height="15" fill="rgb(210,195,18)"/><text x="8.7397%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (40 samples, 1.27%)</title><rect x="8.4897%" y="469" width="1.2719%" height="15" fill="rgb(249,80,12)"/><text x="8.7397%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (40 samples, 1.27%)</title><rect x="8.4897%" y="453" width="1.2719%" height="15" fill="rgb(221,65,9)"/><text x="8.7397%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (40 samples, 1.27%)</title><rect x="8.4897%" y="437" width="1.2719%" height="15" fill="rgb(235,49,36)"/><text x="8.7397%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.03%)</title><rect x="9.7297%" y="421" width="0.0318%" height="15" fill="rgb(225,32,20)"/><text x="9.9797%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="9.7297%" y="405" width="0.0318%" height="15" fill="rgb(215,141,46)"/><text x="9.9797%" y="415.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.03%)</title><rect x="9.7297%" y="389" width="0.0318%" height="15" fill="rgb(250,160,47)"/><text x="9.9797%" y="399.50"></text></g><g><title>[unknown] (8 samples, 0.25%)</title><rect x="10.1431%" y="309" width="0.2544%" height="15" fill="rgb(216,222,40)"/><text x="10.3931%" y="319.50"></text></g><g><title>[unknown] (8 samples, 0.25%)</title><rect x="10.1431%" y="293" width="0.2544%" height="15" fill="rgb(234,217,39)"/><text x="10.3931%" y="303.50"></text></g><g><title>[unknown] (7 samples, 0.22%)</title><rect x="10.1749%" y="277" width="0.2226%" height="15" fill="rgb(207,178,40)"/><text x="10.4249%" y="287.50"></text></g><g><title>[unknown] (7 samples, 0.22%)</title><rect x="10.1749%" y="261" width="0.2226%" height="15" fill="rgb(221,136,13)"/><text x="10.4249%" y="271.50"></text></g><g><title>[unknown] (7 samples, 0.22%)</title><rect x="10.1749%" y="245" width="0.2226%" height="15" fill="rgb(249,199,10)"/><text x="10.4249%" y="255.50"></text></g><g><title>[unknown] (7 samples, 0.22%)</title><rect x="10.1749%" y="229" width="0.2226%" height="15" fill="rgb(249,222,13)"/><text x="10.4249%" y="239.50"></text></g><g><title>[unknown] (7 samples, 0.22%)</title><rect x="10.1749%" y="213" width="0.2226%" height="15" fill="rgb(244,185,38)"/><text x="10.4249%" y="223.50"></text></g><g><title>[unknown] (7 samples, 0.22%)</title><rect x="10.1749%" y="197" width="0.2226%" height="15" fill="rgb(236,202,9)"/><text x="10.4249%" y="207.50"></text></g><g><title>[unknown] (7 samples, 0.22%)</title><rect x="10.1749%" y="181" width="0.2226%" height="15" fill="rgb(250,229,37)"/><text x="10.4249%" y="191.50"></text></g><g><title>[unknown] (7 samples, 0.22%)</title><rect x="10.1749%" y="165" width="0.2226%" height="15" fill="rgb(206,174,23)"/><text x="10.4249%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.19%)</title><rect x="10.2067%" y="149" width="0.1908%" height="15" fill="rgb(211,33,43)"/><text x="10.4567%" y="159.50"></text></g><g><title>alloc_perturb (1 samples, 0.03%)</title><rect x="10.3975%" y="309" width="0.0318%" height="15" fill="rgb(245,58,50)"/><text x="10.6475%" y="319.50"></text></g><g><title>_int_malloc (22 samples, 0.70%)</title><rect x="9.8251%" y="325" width="0.6995%" height="15" fill="rgb(244,68,36)"/><text x="10.0751%" y="335.50"></text></g><g><title>get_max_fast (3 samples, 0.10%)</title><rect x="10.4293%" y="309" width="0.0954%" height="15" fill="rgb(232,229,15)"/><text x="10.6793%" y="319.50"></text></g><g><title>__GI___libc_malloc (25 samples, 0.79%)</title><rect x="9.7615%" y="341" width="0.7949%" height="15" fill="rgb(254,30,23)"/><text x="10.0115%" y="351.50"></text></g><g><title>checked_request2size (1 samples, 0.03%)</title><rect x="10.5246%" y="325" width="0.0318%" height="15" fill="rgb(235,160,14)"/><text x="10.7746%" y="335.50"></text></g><g><title>__rdl_alloc (2 samples, 0.06%)</title><rect x="10.5564%" y="341" width="0.0636%" height="15" fill="rgb(212,155,44)"/><text x="10.8064%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.06%)</title><rect x="10.5564%" y="325" width="0.0636%" height="15" fill="rgb(226,2,50)"/><text x="10.8064%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (28 samples, 0.89%)</title><rect x="9.7615%" y="437" width="0.8903%" height="15" fill="rgb(234,177,6)"/><text x="10.0115%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (28 samples, 0.89%)</title><rect x="9.7615%" y="421" width="0.8903%" height="15" fill="rgb(217,24,9)"/><text x="10.0115%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (28 samples, 0.89%)</title><rect x="9.7615%" y="405" width="0.8903%" height="15" fill="rgb(220,13,46)"/><text x="10.0115%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28 samples, 0.89%)</title><rect x="9.7615%" y="389" width="0.8903%" height="15" fill="rgb(239,221,27)"/><text x="10.0115%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28 samples, 0.89%)</title><rect x="9.7615%" y="373" width="0.8903%" height="15" fill="rgb(222,198,25)"/><text x="10.0115%" y="383.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.89%)</title><rect x="9.7615%" y="357" width="0.8903%" height="15" fill="rgb(211,99,13)"/><text x="10.0115%" y="367.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="10.6200%" y="341" width="0.0318%" height="15" fill="rgb(232,111,31)"/><text x="10.8700%" y="351.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.06%)</title><rect x="10.6518%" y="405" width="0.0636%" height="15" fill="rgb(245,82,37)"/><text x="10.9018%" y="415.50"></text></g><g><title>_int_malloc (2 samples, 0.06%)</title><rect x="10.6518%" y="389" width="0.0636%" height="15" fill="rgb(227,149,46)"/><text x="10.9018%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="10.6518%" y="373" width="0.0636%" height="15" fill="rgb(218,36,50)"/><text x="10.9018%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (31 samples, 0.99%)</title><rect x="9.7615%" y="501" width="0.9857%" height="15" fill="rgb(226,80,48)"/><text x="10.0115%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (31 samples, 0.99%)</title><rect x="9.7615%" y="485" width="0.9857%" height="15" fill="rgb(238,224,15)"/><text x="10.0115%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (31 samples, 0.99%)</title><rect x="9.7615%" y="469" width="0.9857%" height="15" fill="rgb(241,136,10)"/><text x="10.0115%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (31 samples, 0.99%)</title><rect x="9.7615%" y="453" width="0.9857%" height="15" fill="rgb(208,32,45)"/><text x="10.0115%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.10%)</title><rect x="10.6518%" y="437" width="0.0954%" height="15" fill="rgb(207,135,9)"/><text x="10.9018%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.10%)</title><rect x="10.6518%" y="421" width="0.0954%" height="15" fill="rgb(206,86,44)"/><text x="10.9018%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.03%)</title><rect x="10.7154%" y="405" width="0.0318%" height="15" fill="rgb(245,177,15)"/><text x="10.9654%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="10.7472%" y="501" width="0.0318%" height="15" fill="rgb(206,64,50)"/><text x="10.9972%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="10.7472%" y="485" width="0.0318%" height="15" fill="rgb(234,36,40)"/><text x="10.9972%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="10.7472%" y="469" width="0.0318%" height="15" fill="rgb(213,64,8)"/><text x="10.9972%" y="479.50"></text></g><g><title>[unknown] (44 samples, 1.40%)</title><rect x="11.5739%" y="357" width="1.3990%" height="15" fill="rgb(210,75,36)"/><text x="11.8239%" y="367.50"></text></g><g><title>[unknown] (39 samples, 1.24%)</title><rect x="11.7329%" y="341" width="1.2401%" height="15" fill="rgb(229,88,21)"/><text x="11.9829%" y="351.50"></text></g><g><title>[unknown] (39 samples, 1.24%)</title><rect x="11.7329%" y="325" width="1.2401%" height="15" fill="rgb(252,204,47)"/><text x="11.9829%" y="335.50"></text></g><g><title>[unknown] (38 samples, 1.21%)</title><rect x="11.7647%" y="309" width="1.2083%" height="15" fill="rgb(208,77,27)"/><text x="12.0147%" y="319.50"></text></g><g><title>[unknown] (38 samples, 1.21%)</title><rect x="11.7647%" y="293" width="1.2083%" height="15" fill="rgb(221,76,26)"/><text x="12.0147%" y="303.50"></text></g><g><title>[unknown] (38 samples, 1.21%)</title><rect x="11.7647%" y="277" width="1.2083%" height="15" fill="rgb(225,139,18)"/><text x="12.0147%" y="287.50"></text></g><g><title>[unknown] (37 samples, 1.18%)</title><rect x="11.7965%" y="261" width="1.1765%" height="15" fill="rgb(230,137,11)"/><text x="12.0465%" y="271.50"></text></g><g><title>[unknown] (37 samples, 1.18%)</title><rect x="11.7965%" y="245" width="1.1765%" height="15" fill="rgb(212,28,1)"/><text x="12.0465%" y="255.50"></text></g><g><title>[unknown] (37 samples, 1.18%)</title><rect x="11.7965%" y="229" width="1.1765%" height="15" fill="rgb(248,164,17)"/><text x="12.0465%" y="239.50"></text></g><g><title>[unknown] (35 samples, 1.11%)</title><rect x="11.8601%" y="213" width="1.1129%" height="15" fill="rgb(222,171,42)"/><text x="12.1101%" y="223.50"></text></g><g><title>[unknown] (33 samples, 1.05%)</title><rect x="11.9237%" y="197" width="1.0493%" height="15" fill="rgb(243,84,45)"/><text x="12.1737%" y="207.50"></text></g><g><title>alloc_perturb (5 samples, 0.16%)</title><rect x="12.9730%" y="357" width="0.1590%" height="15" fill="rgb(252,49,23)"/><text x="13.2230%" y="367.50"></text></g><g><title>get_max_fast (1 samples, 0.03%)</title><rect x="13.1320%" y="357" width="0.0318%" height="15" fill="rgb(215,19,7)"/><text x="13.3820%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="13.1638%" y="341" width="0.0636%" height="15" fill="rgb(238,81,41)"/><text x="13.4138%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="13.1638%" y="325" width="0.0636%" height="15" fill="rgb(210,199,37)"/><text x="13.4138%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="13.1638%" y="309" width="0.0636%" height="15" fill="rgb(244,192,49)"/><text x="13.4138%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="13.1638%" y="293" width="0.0636%" height="15" fill="rgb(226,211,11)"/><text x="13.4138%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="13.1638%" y="277" width="0.0636%" height="15" fill="rgb(236,162,54)"/><text x="13.4138%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="13.1638%" y="261" width="0.0636%" height="15" fill="rgb(220,229,9)"/><text x="13.4138%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="13.1638%" y="245" width="0.0636%" height="15" fill="rgb(250,87,22)"/><text x="13.4138%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="13.1638%" y="229" width="0.0636%" height="15" fill="rgb(239,43,17)"/><text x="13.4138%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="13.1638%" y="213" width="0.0636%" height="15" fill="rgb(231,177,25)"/><text x="13.4138%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="13.1955%" y="197" width="0.0318%" height="15" fill="rgb(219,179,1)"/><text x="13.4455%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="13.1955%" y="181" width="0.0318%" height="15" fill="rgb(238,219,53)"/><text x="13.4455%" y="191.50"></text></g><g><title>_int_malloc (78 samples, 2.48%)</title><rect x="10.8744%" y="373" width="2.4801%" height="15" fill="rgb(232,167,36)"/><text x="11.1244%" y="383.50">_i..</text></g><g><title>sysmalloc (6 samples, 0.19%)</title><rect x="13.1638%" y="357" width="0.1908%" height="15" fill="rgb(244,19,51)"/><text x="13.4138%" y="367.50"></text></g><g><title>__GI___default_morecore (4 samples, 0.13%)</title><rect x="13.2273%" y="341" width="0.1272%" height="15" fill="rgb(224,6,22)"/><text x="13.4773%" y="351.50"></text></g><g><title>__GI___sbrk (4 samples, 0.13%)</title><rect x="13.2273%" y="325" width="0.1272%" height="15" fill="rgb(224,145,5)"/><text x="13.4773%" y="335.50"></text></g><g><title>__GI___sbrk (4 samples, 0.13%)</title><rect x="13.2273%" y="309" width="0.1272%" height="15" fill="rgb(234,130,49)"/><text x="13.4773%" y="319.50"></text></g><g><title>__brk (4 samples, 0.13%)</title><rect x="13.2273%" y="293" width="0.1272%" height="15" fill="rgb(254,6,2)"/><text x="13.4773%" y="303.50"></text></g><g><title>[unknown] (4 samples, 0.13%)</title><rect x="13.2273%" y="277" width="0.1272%" height="15" fill="rgb(208,96,46)"/><text x="13.4773%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="13.2591%" y="261" width="0.0954%" height="15" fill="rgb(239,3,39)"/><text x="13.5091%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="13.2591%" y="245" width="0.0954%" height="15" fill="rgb(233,210,1)"/><text x="13.5091%" y="255.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="13.2591%" y="229" width="0.0954%" height="15" fill="rgb(244,137,37)"/><text x="13.5091%" y="239.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="13.2591%" y="213" width="0.0954%" height="15" fill="rgb(240,136,2)"/><text x="13.5091%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="13.3227%" y="197" width="0.0318%" height="15" fill="rgb(239,18,37)"/><text x="13.5727%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="13.3227%" y="181" width="0.0318%" height="15" fill="rgb(218,185,22)"/><text x="13.5727%" y="191.50"></text></g><g><title>__GI___libc_malloc (81 samples, 2.58%)</title><rect x="10.8108%" y="389" width="2.5755%" height="15" fill="rgb(225,218,4)"/><text x="11.0608%" y="399.50">__..</text></g><g><title>checked_request2size (1 samples, 0.03%)</title><rect x="13.3545%" y="373" width="0.0318%" height="15" fill="rgb(230,182,32)"/><text x="13.6045%" y="383.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="13.3863%" y="389" width="0.0318%" height="15" fill="rgb(242,56,43)"/><text x="13.6363%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="13.3863%" y="373" width="0.0318%" height="15" fill="rgb(233,99,24)"/><text x="13.6363%" y="383.50"></text></g><g><title>&lt;csv::reader::StringRecordsIter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (256 samples, 8.14%)</title><rect x="5.3418%" y="549" width="8.1399%" height="15" fill="rgb(234,209,42)"/><text x="5.5918%" y="559.50">&lt;csv::reade..</text></g><g><title>csv::string_record::StringRecord::clone_truncated (162 samples, 5.15%)</title><rect x="8.3307%" y="533" width="5.1510%" height="15" fill="rgb(227,7,12)"/><text x="8.5807%" y="543.50">csv::s..</text></g><g><title>csv::byte_record::ByteRecord::clone_truncated (162 samples, 5.15%)</title><rect x="8.3307%" y="517" width="5.1510%" height="15" fill="rgb(245,203,43)"/><text x="8.5807%" y="527.50">csv::b..</text></g><g><title>csv::byte_record::ByteRecord::new (85 samples, 2.70%)</title><rect x="10.7790%" y="501" width="2.7027%" height="15" fill="rgb(238,205,33)"/><text x="11.0290%" y="511.50">cs..</text></g><g><title>csv::byte_record::ByteRecord::with_capacity (85 samples, 2.70%)</title><rect x="10.7790%" y="485" width="2.7027%" height="15" fill="rgb(231,56,7)"/><text x="11.0290%" y="495.50">cs..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (85 samples, 2.70%)</title><rect x="10.7790%" y="469" width="2.7027%" height="15" fill="rgb(244,186,29)"/><text x="11.0290%" y="479.50">al..</text></g><g><title>alloc::alloc::exchange_malloc (84 samples, 2.67%)</title><rect x="10.8108%" y="453" width="2.6709%" height="15" fill="rgb(234,111,31)"/><text x="11.0608%" y="463.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (84 samples, 2.67%)</title><rect x="10.8108%" y="437" width="2.6709%" height="15" fill="rgb(241,149,10)"/><text x="11.0608%" y="447.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (84 samples, 2.67%)</title><rect x="10.8108%" y="421" width="2.6709%" height="15" fill="rgb(249,206,44)"/><text x="11.0608%" y="431.50">al..</text></g><g><title>alloc::alloc::alloc (84 samples, 2.67%)</title><rect x="10.8108%" y="405" width="2.6709%" height="15" fill="rgb(251,153,30)"/><text x="11.0608%" y="415.50">al..</text></g><g><title>__rust_alloc (2 samples, 0.06%)</title><rect x="13.4181%" y="389" width="0.0636%" height="15" fill="rgb(239,152,38)"/><text x="13.6681%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (11 samples, 0.35%)</title><rect x="13.4817%" y="549" width="0.3498%" height="15" fill="rgb(249,139,47)"/><text x="13.7317%" y="559.50"></text></g><g><title>core::ptr::write (7 samples, 0.22%)</title><rect x="13.6089%" y="533" width="0.2226%" height="15" fill="rgb(244,64,35)"/><text x="13.8589%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.16%)</title><rect x="13.6725%" y="517" width="0.1590%" height="15" fill="rgb(216,46,15)"/><text x="13.9225%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.16%)</title><rect x="13.6725%" y="501" width="0.1590%" height="15" fill="rgb(250,74,19)"/><text x="13.9225%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.16%)</title><rect x="13.6725%" y="485" width="0.1590%" height="15" fill="rgb(249,42,33)"/><text x="13.9225%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.16%)</title><rect x="13.6725%" y="469" width="0.1590%" height="15" fill="rgb(242,149,17)"/><text x="13.9225%" y="479.50"></text></g><g><title>[unknown] (4 samples, 0.13%)</title><rect x="13.7043%" y="453" width="0.1272%" height="15" fill="rgb(244,29,21)"/><text x="13.9543%" y="463.50"></text></g><g><title>[unknown] (4 samples, 0.13%)</title><rect x="13.7043%" y="437" width="0.1272%" height="15" fill="rgb(220,130,37)"/><text x="13.9543%" y="447.50"></text></g><g><title>[unknown] (4 samples, 0.13%)</title><rect x="13.7043%" y="421" width="0.1272%" height="15" fill="rgb(211,67,2)"/><text x="13.9543%" y="431.50"></text></g><g><title>[unknown] (4 samples, 0.13%)</title><rect x="13.7043%" y="405" width="0.1272%" height="15" fill="rgb(235,68,52)"/><text x="13.9543%" y="415.50"></text></g><g><title>[unknown] (4 samples, 0.13%)</title><rect x="13.7043%" y="389" width="0.1272%" height="15" fill="rgb(246,142,3)"/><text x="13.9543%" y="399.50"></text></g><g><title>[unknown] (4 samples, 0.13%)</title><rect x="13.7043%" y="373" width="0.1272%" height="15" fill="rgb(241,25,7)"/><text x="13.9543%" y="383.50"></text></g><g><title>[unknown] (4 samples, 0.13%)</title><rect x="13.7043%" y="357" width="0.1272%" height="15" fill="rgb(242,119,39)"/><text x="13.9543%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="13.7997%" y="341" width="0.0318%" height="15" fill="rgb(241,98,45)"/><text x="14.0497%" y="351.50"></text></g><g><title>qsv::csv::csv_data::CsvData::from_filename (396 samples, 12.59%)</title><rect x="5.3418%" y="565" width="12.5914%" height="15" fill="rgb(254,28,30)"/><text x="5.5918%" y="575.50">qsv::csv::csv_data:..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (129 samples, 4.10%)</title><rect x="13.8315%" y="549" width="4.1017%" height="15" fill="rgb(241,142,54)"/><text x="14.0815%" y="559.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (129 samples, 4.10%)</title><rect x="13.8315%" y="533" width="4.1017%" height="15" fill="rgb(222,85,15)"/><text x="14.0815%" y="543.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (129 samples, 4.10%)</title><rect x="13.8315%" y="517" width="4.1017%" height="15" fill="rgb(210,85,47)"/><text x="14.0815%" y="527.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (129 samples, 4.10%)</title><rect x="13.8315%" y="501" width="4.1017%" height="15" fill="rgb(224,206,25)"/><text x="14.0815%" y="511.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (129 samples, 4.10%)</title><rect x="13.8315%" y="485" width="4.1017%" height="15" fill="rgb(243,201,19)"/><text x="14.0815%" y="495.50">&lt;all..</text></g><g><title>alloc::alloc::Global::alloc_impl (129 samples, 4.10%)</title><rect x="13.8315%" y="469" width="4.1017%" height="15" fill="rgb(236,59,4)"/><text x="14.0815%" y="479.50">allo..</text></g><g><title>alloc::alloc::alloc (129 samples, 4.10%)</title><rect x="13.8315%" y="453" width="4.1017%" height="15" fill="rgb(254,179,45)"/><text x="14.0815%" y="463.50">allo..</text></g><g><title>__GI___libc_malloc (129 samples, 4.10%)</title><rect x="13.8315%" y="437" width="4.1017%" height="15" fill="rgb(226,14,10)"/><text x="14.0815%" y="447.50">__GI..</text></g><g><title>_int_malloc (129 samples, 4.10%)</title><rect x="13.8315%" y="421" width="4.1017%" height="15" fill="rgb(244,27,41)"/><text x="14.0815%" y="431.50">_int..</text></g><g><title>malloc_consolidate (129 samples, 4.10%)</title><rect x="13.8315%" y="405" width="4.1017%" height="15" fill="rgb(235,35,32)"/><text x="14.0815%" y="415.50">mall..</text></g><g><title>unlink_chunk (56 samples, 1.78%)</title><rect x="16.1526%" y="389" width="1.7806%" height="15" fill="rgb(218,68,31)"/><text x="16.4026%" y="399.50">u..</text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 0.13%)</title><rect x="17.9332%" y="501" width="0.1272%" height="15" fill="rgb(207,120,37)"/><text x="18.1832%" y="511.50"></text></g><g><title>csv::byte_record::ByteRecord::get::{{closure}} (4 samples, 0.13%)</title><rect x="17.9332%" y="485" width="0.1272%" height="15" fill="rgb(227,98,0)"/><text x="18.1832%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.13%)</title><rect x="17.9332%" y="469" width="0.1272%" height="15" fill="rgb(207,7,3)"/><text x="18.1832%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.10%)</title><rect x="17.9650%" y="453" width="0.0954%" height="15" fill="rgb(206,98,19)"/><text x="18.2150%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.10%)</title><rect x="17.9650%" y="437" width="0.0954%" height="15" fill="rgb(217,5,26)"/><text x="18.2150%" y="447.50"></text></g><g><title>csv::string_record::StringRecord::get (32 samples, 1.02%)</title><rect x="17.9332%" y="533" width="1.0175%" height="15" fill="rgb(235,190,38)"/><text x="18.1832%" y="543.50"></text></g><g><title>csv::byte_record::ByteRecord::get (32 samples, 1.02%)</title><rect x="17.9332%" y="517" width="1.0175%" height="15" fill="rgb(247,86,24)"/><text x="18.1832%" y="527.50"></text></g><g><title>csv::byte_record::Bounds::get (28 samples, 0.89%)</title><rect x="18.0604%" y="501" width="0.8903%" height="15" fill="rgb(205,101,16)"/><text x="18.3104%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (5 samples, 0.16%)</title><rect x="18.7917%" y="485" width="0.1590%" height="15" fill="rgb(246,168,33)"/><text x="19.0417%" y="495.50"></text></g><g><title>csv::byte_record::Bounds::get::{{closure}} (5 samples, 0.16%)</title><rect x="18.7917%" y="469" width="0.1590%" height="15" fill="rgb(231,114,1)"/><text x="19.0417%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (5 samples, 0.16%)</title><rect x="18.7917%" y="453" width="0.1590%" height="15" fill="rgb(207,184,53)"/><text x="19.0417%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (5 samples, 0.16%)</title><rect x="18.7917%" y="437" width="0.1590%" height="15" fill="rgb(224,95,51)"/><text x="19.0417%" y="447.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (1 samples, 0.03%)</title><rect x="19.5231%" y="469" width="0.0318%" height="15" fill="rgb(212,188,45)"/><text x="19.7731%" y="479.50"></text></g><g><title>qsv::csv::inference::ColumnInference::from_csv (52 samples, 1.65%)</title><rect x="17.9332%" y="565" width="1.6534%" height="15" fill="rgb(223,154,38)"/><text x="18.1832%" y="575.50"></text></g><g><title>qsv::csv::inference::get_type_of_column (52 samples, 1.65%)</title><rect x="17.9332%" y="549" width="1.6534%" height="15" fill="rgb(251,22,52)"/><text x="18.1832%" y="559.50"></text></g><g><title>qsv::csv::inference::parse (20 samples, 0.64%)</title><rect x="18.9507%" y="533" width="0.6359%" height="15" fill="rgb(229,209,22)"/><text x="19.2007%" y="543.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (20 samples, 0.64%)</title><rect x="18.9507%" y="517" width="0.6359%" height="15" fill="rgb(234,138,34)"/><text x="19.2007%" y="527.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (20 samples, 0.64%)</title><rect x="18.9507%" y="501" width="0.6359%" height="15" fill="rgb(212,95,11)"/><text x="19.2007%" y="511.50"></text></g><g><title>core::num::from_str_radix (20 samples, 0.64%)</title><rect x="18.9507%" y="485" width="0.6359%" height="15" fill="rgb(240,179,47)"/><text x="19.2007%" y="495.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.03%)</title><rect x="19.5548%" y="469" width="0.0318%" height="15" fill="rgb(240,163,11)"/><text x="19.8048%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.06%)</title><rect x="19.5866%" y="549" width="0.0636%" height="15" fill="rgb(236,37,12)"/><text x="19.8366%" y="559.50"></text></g><g><title>alloc::string::String::new (2 samples, 0.06%)</title><rect x="20.6677%" y="437" width="0.0636%" height="15" fill="rgb(232,164,16)"/><text x="20.9177%" y="447.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.06%)</title><rect x="21.8760%" y="405" width="0.0636%" height="15" fill="rgb(244,205,15)"/><text x="22.1260%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (10 samples, 0.32%)</title><rect x="22.1304%" y="309" width="0.3180%" height="15" fill="rgb(223,117,47)"/><text x="22.3804%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.29%)</title><rect x="22.1622%" y="293" width="0.2862%" height="15" fill="rgb(244,107,35)"/><text x="22.4122%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.03%)</title><rect x="22.4165%" y="277" width="0.0318%" height="15" fill="rgb(205,140,8)"/><text x="22.6665%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.03%)</title><rect x="22.4165%" y="261" width="0.0318%" height="15" fill="rgb(228,84,46)"/><text x="22.6665%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.03%)</title><rect x="22.4165%" y="245" width="0.0318%" height="15" fill="rgb(254,188,9)"/><text x="22.6665%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="22.4483%" y="309" width="0.0636%" height="15" fill="rgb(206,112,54)"/><text x="22.6983%" y="319.50"></text></g><g><title>__memcpy_avx_unaligned (2 samples, 0.06%)</title><rect x="22.4483%" y="293" width="0.0636%" height="15" fill="rgb(216,84,49)"/><text x="22.6983%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (24 samples, 0.76%)</title><rect x="21.9396%" y="405" width="0.7631%" height="15" fill="rgb(214,194,35)"/><text x="22.1896%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (18 samples, 0.57%)</title><rect x="22.1304%" y="389" width="0.5723%" height="15" fill="rgb(249,28,3)"/><text x="22.3804%" y="399.50"></text></g><g><title>alloc::string::String::push_str (18 samples, 0.57%)</title><rect x="22.1304%" y="373" width="0.5723%" height="15" fill="rgb(222,56,52)"/><text x="22.3804%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (18 samples, 0.57%)</title><rect x="22.1304%" y="357" width="0.5723%" height="15" fill="rgb(245,217,50)"/><text x="22.3804%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (18 samples, 0.57%)</title><rect x="22.1304%" y="341" width="0.5723%" height="15" fill="rgb(213,201,24)"/><text x="22.3804%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (18 samples, 0.57%)</title><rect x="22.1304%" y="325" width="0.5723%" height="15" fill="rgb(248,116,28)"/><text x="22.3804%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (6 samples, 0.19%)</title><rect x="22.5119%" y="309" width="0.1908%" height="15" fill="rgb(219,72,43)"/><text x="22.7619%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (6 samples, 0.19%)</title><rect x="22.5119%" y="293" width="0.1908%" height="15" fill="rgb(209,138,14)"/><text x="22.7619%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="22.7027%" y="405" width="0.0636%" height="15" fill="rgb(222,18,33)"/><text x="22.9527%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (2 samples, 0.06%)</title><rect x="22.7027%" y="389" width="0.0636%" height="15" fill="rgb(213,199,7)"/><text x="22.9527%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (2 samples, 0.06%)</title><rect x="23.2750%" y="213" width="0.0636%" height="15" fill="rgb(250,110,10)"/><text x="23.5250%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.13%)</title><rect x="23.3386%" y="213" width="0.1272%" height="15" fill="rgb(248,123,6)"/><text x="23.5886%" y="223.50"></text></g><g><title>__GI___libc_malloc (16 samples, 0.51%)</title><rect x="23.6566%" y="197" width="0.5087%" height="15" fill="rgb(206,91,31)"/><text x="23.9066%" y="207.50"></text></g><g><title>tcache_get (6 samples, 0.19%)</title><rect x="23.9746%" y="181" width="0.1908%" height="15" fill="rgb(211,154,13)"/><text x="24.2246%" y="191.50"></text></g><g><title>__rdl_alloc (13 samples, 0.41%)</title><rect x="24.1653%" y="197" width="0.4134%" height="15" fill="rgb(225,148,7)"/><text x="24.4153%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (11 samples, 0.35%)</title><rect x="24.2289%" y="181" width="0.3498%" height="15" fill="rgb(220,160,43)"/><text x="24.4789%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (38 samples, 1.21%)</title><rect x="23.4658%" y="213" width="1.2083%" height="15" fill="rgb(213,52,39)"/><text x="23.7158%" y="223.50"></text></g><g><title>__rust_alloc (3 samples, 0.10%)</title><rect x="24.5787%" y="197" width="0.0954%" height="15" fill="rgb(243,137,7)"/><text x="24.8287%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (50 samples, 1.59%)</title><rect x="23.1161%" y="277" width="1.5898%" height="15" fill="rgb(230,79,13)"/><text x="23.3661%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (47 samples, 1.49%)</title><rect x="23.2114%" y="261" width="1.4944%" height="15" fill="rgb(247,105,23)"/><text x="23.4614%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (45 samples, 1.43%)</title><rect x="23.2750%" y="245" width="1.4308%" height="15" fill="rgb(223,179,41)"/><text x="23.5250%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (45 samples, 1.43%)</title><rect x="23.2750%" y="229" width="1.4308%" height="15" fill="rgb(218,9,34)"/><text x="23.5250%" y="239.50"></text></g><g><title>core::cmp::max (1 samples, 0.03%)</title><rect x="24.6741%" y="213" width="0.0318%" height="15" fill="rgb(222,106,8)"/><text x="24.9241%" y="223.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.03%)</title><rect x="24.6741%" y="197" width="0.0318%" height="15" fill="rgb(211,220,0)"/><text x="24.9241%" y="207.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.03%)</title><rect x="24.6741%" y="181" width="0.0318%" height="15" fill="rgb(229,52,16)"/><text x="24.9241%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned (2 samples, 0.06%)</title><rect x="24.7059%" y="261" width="0.0636%" height="15" fill="rgb(212,155,18)"/><text x="24.9559%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.16%)</title><rect x="24.7059%" y="277" width="0.1590%" height="15" fill="rgb(242,21,14)"/><text x="24.9559%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.10%)</title><rect x="24.7695%" y="261" width="0.0954%" height="15" fill="rgb(222,19,48)"/><text x="25.0195%" y="271.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (61 samples, 1.94%)</title><rect x="23.0207%" y="373" width="1.9396%" height="15" fill="rgb(232,45,27)"/><text x="23.2707%" y="383.50">&lt;..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (59 samples, 1.88%)</title><rect x="23.0843%" y="357" width="1.8760%" height="15" fill="rgb(249,103,42)"/><text x="23.3343%" y="367.50">&lt;..</text></g><g><title>alloc::string::String::push_str (59 samples, 1.88%)</title><rect x="23.0843%" y="341" width="1.8760%" height="15" fill="rgb(246,81,33)"/><text x="23.3343%" y="351.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (59 samples, 1.88%)</title><rect x="23.0843%" y="325" width="1.8760%" height="15" fill="rgb(252,33,42)"/><text x="23.3343%" y="335.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (59 samples, 1.88%)</title><rect x="23.0843%" y="309" width="1.8760%" height="15" fill="rgb(209,212,41)"/><text x="23.3343%" y="319.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (59 samples, 1.88%)</title><rect x="23.0843%" y="293" width="1.8760%" height="15" fill="rgb(207,154,6)"/><text x="23.3343%" y="303.50">a..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.10%)</title><rect x="24.8649%" y="277" width="0.0954%" height="15" fill="rgb(223,64,47)"/><text x="25.1149%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.10%)</title><rect x="24.8649%" y="261" width="0.0954%" height="15" fill="rgb(211,161,38)"/><text x="25.1149%" y="271.50"></text></g><g><title>core::fmt::Formatter::alternate (2 samples, 0.06%)</title><rect x="25.1510%" y="357" width="0.0636%" height="15" fill="rgb(219,138,40)"/><text x="25.4010%" y="367.50"></text></g><g><title>core::fmt::Formatter::pad_integral (16 samples, 0.51%)</title><rect x="24.9603%" y="373" width="0.5087%" height="15" fill="rgb(241,228,46)"/><text x="25.2103%" y="383.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (8 samples, 0.25%)</title><rect x="25.2146%" y="357" width="0.2544%" height="15" fill="rgb(223,209,38)"/><text x="25.4646%" y="367.50"></text></g><g><title>core::fmt::Write::write_fmt (152 samples, 4.83%)</title><rect x="20.7313%" y="437" width="4.8331%" height="15" fill="rgb(236,164,45)"/><text x="20.9813%" y="447.50">core::..</text></g><g><title>core::fmt::write (148 samples, 4.71%)</title><rect x="20.8585%" y="421" width="4.7059%" height="15" fill="rgb(231,15,5)"/><text x="21.1085%" y="431.50">core:..</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i64&gt;::fmt (88 samples, 2.80%)</title><rect x="22.7663%" y="405" width="2.7981%" height="15" fill="rgb(252,35,15)"/><text x="23.0163%" y="415.50">co..</text></g><g><title>core::fmt::num::imp::fmt_u64 (80 samples, 2.54%)</title><rect x="23.0207%" y="389" width="2.5437%" height="15" fill="rgb(248,181,18)"/><text x="23.2707%" y="399.50">co..</text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.10%)</title><rect x="25.4690%" y="373" width="0.0954%" height="15" fill="rgb(233,39,42)"/><text x="25.7190%" y="383.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (156 samples, 4.96%)</title><rect x="20.6359%" y="453" width="4.9603%" height="15" fill="rgb(238,110,33)"/><text x="20.8859%" y="463.50">&lt;T as ..</text></g><g><title>core::result::Result&lt;T,E&gt;::expect (1 samples, 0.03%)</title><rect x="25.5644%" y="437" width="0.0318%" height="15" fill="rgb(233,195,10)"/><text x="25.8144%" y="447.50"></text></g><g><title>checked_request2size (1 samples, 0.03%)</title><rect x="26.0413%" y="229" width="0.0318%" height="15" fill="rgb(254,105,3)"/><text x="26.2913%" y="239.50"></text></g><g><title>__GI___libc_malloc (18 samples, 0.57%)</title><rect x="25.7552%" y="245" width="0.5723%" height="15" fill="rgb(221,225,9)"/><text x="26.0052%" y="255.50"></text></g><g><title>tcache_get (8 samples, 0.25%)</title><rect x="26.0731%" y="229" width="0.2544%" height="15" fill="rgb(224,227,45)"/><text x="26.3231%" y="239.50"></text></g><g><title>__rdl_alloc (6 samples, 0.19%)</title><rect x="26.3275%" y="245" width="0.1908%" height="15" fill="rgb(229,198,43)"/><text x="26.5775%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.13%)</title><rect x="26.3911%" y="229" width="0.1272%" height="15" fill="rgb(206,209,35)"/><text x="26.6411%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (32 samples, 1.02%)</title><rect x="25.5962%" y="341" width="1.0175%" height="15" fill="rgb(245,195,53)"/><text x="25.8462%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (32 samples, 1.02%)</title><rect x="25.5962%" y="325" width="1.0175%" height="15" fill="rgb(240,92,26)"/><text x="25.8462%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (32 samples, 1.02%)</title><rect x="25.5962%" y="309" width="1.0175%" height="15" fill="rgb(207,40,23)"/><text x="25.8462%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 1.02%)</title><rect x="25.5962%" y="293" width="1.0175%" height="15" fill="rgb(223,111,35)"/><text x="25.8462%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 1.02%)</title><rect x="25.5962%" y="277" width="1.0175%" height="15" fill="rgb(229,147,28)"/><text x="25.8462%" y="287.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 0.99%)</title><rect x="25.6280%" y="261" width="0.9857%" height="15" fill="rgb(211,29,28)"/><text x="25.8780%" y="271.50"></text></g><g><title>__rust_alloc (3 samples, 0.10%)</title><rect x="26.5183%" y="245" width="0.0954%" height="15" fill="rgb(228,72,33)"/><text x="26.7683%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (36 samples, 1.14%)</title><rect x="25.5962%" y="421" width="1.1447%" height="15" fill="rgb(205,214,31)"/><text x="25.8462%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (36 samples, 1.14%)</title><rect x="25.5962%" y="405" width="1.1447%" height="15" fill="rgb(224,111,15)"/><text x="25.8462%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (36 samples, 1.14%)</title><rect x="25.5962%" y="389" width="1.1447%" height="15" fill="rgb(253,21,26)"/><text x="25.8462%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (36 samples, 1.14%)</title><rect x="25.5962%" y="373" width="1.1447%" height="15" fill="rgb(245,139,43)"/><text x="25.8462%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (36 samples, 1.14%)</title><rect x="25.5962%" y="357" width="1.1447%" height="15" fill="rgb(252,170,7)"/><text x="25.8462%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.13%)</title><rect x="26.6137%" y="341" width="0.1272%" height="15" fill="rgb(231,118,14)"/><text x="26.8637%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.13%)</title><rect x="26.6137%" y="325" width="0.1272%" height="15" fill="rgb(238,83,0)"/><text x="26.8637%" y="335.50"></text></g><g><title>__memcpy_avx_unaligned (4 samples, 0.13%)</title><rect x="26.6137%" y="309" width="0.1272%" height="15" fill="rgb(221,39,39)"/><text x="26.8637%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (39 samples, 1.24%)</title><rect x="25.5962%" y="453" width="1.2401%" height="15" fill="rgb(222,119,46)"/><text x="25.8462%" y="463.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (39 samples, 1.24%)</title><rect x="25.5962%" y="437" width="1.2401%" height="15" fill="rgb(222,165,49)"/><text x="25.8462%" y="447.50"></text></g><g><title>alloc::string::String::from_utf8_unchecked (3 samples, 0.10%)</title><rect x="26.7409%" y="421" width="0.0954%" height="15" fill="rgb(219,113,52)"/><text x="26.9909%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (37 samples, 1.18%)</title><rect x="26.8362%" y="453" width="1.1765%" height="15" fill="rgb(214,7,15)"/><text x="27.0862%" y="463.50"></text></g><g><title>core::ptr::write (33 samples, 1.05%)</title><rect x="26.9634%" y="437" width="1.0493%" height="15" fill="rgb(235,32,4)"/><text x="27.2134%" y="447.50"></text></g><g><title>checked_request2size (1 samples, 0.03%)</title><rect x="28.3625%" y="325" width="0.0318%" height="15" fill="rgb(238,90,54)"/><text x="28.6125%" y="335.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.25%)</title><rect x="28.1717%" y="341" width="0.2544%" height="15" fill="rgb(213,208,19)"/><text x="28.4217%" y="351.50"></text></g><g><title>tcache_get (1 samples, 0.03%)</title><rect x="28.3943%" y="325" width="0.0318%" height="15" fill="rgb(233,156,4)"/><text x="28.6443%" y="335.50"></text></g><g><title>__rdl_alloc (4 samples, 0.13%)</title><rect x="28.4261%" y="341" width="0.1272%" height="15" fill="rgb(207,194,5)"/><text x="28.6761%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.10%)</title><rect x="28.4579%" y="325" width="0.0954%" height="15" fill="rgb(206,111,30)"/><text x="28.7079%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (21 samples, 0.67%)</title><rect x="28.0127%" y="453" width="0.6677%" height="15" fill="rgb(243,70,54)"/><text x="28.2627%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (21 samples, 0.67%)</title><rect x="28.0127%" y="437" width="0.6677%" height="15" fill="rgb(242,28,8)"/><text x="28.2627%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (21 samples, 0.67%)</title><rect x="28.0127%" y="421" width="0.6677%" height="15" fill="rgb(219,106,18)"/><text x="28.2627%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (21 samples, 0.67%)</title><rect x="28.0127%" y="405" width="0.6677%" height="15" fill="rgb(244,222,10)"/><text x="28.2627%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (21 samples, 0.67%)</title><rect x="28.0127%" y="389" width="0.6677%" height="15" fill="rgb(236,179,52)"/><text x="28.2627%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (21 samples, 0.67%)</title><rect x="28.0127%" y="373" width="0.6677%" height="15" fill="rgb(213,23,39)"/><text x="28.2627%" y="383.50"></text></g><g><title>alloc::alloc::alloc (21 samples, 0.67%)</title><rect x="28.0127%" y="357" width="0.6677%" height="15" fill="rgb(238,48,10)"/><text x="28.2627%" y="367.50"></text></g><g><title>__rust_alloc (4 samples, 0.13%)</title><rect x="28.5533%" y="341" width="0.1272%" height="15" fill="rgb(251,196,23)"/><text x="28.8033%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.03%)</title><rect x="28.6804%" y="453" width="0.0318%" height="15" fill="rgb(250,152,24)"/><text x="28.9304%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.03%)</title><rect x="28.6804%" y="437" width="0.0318%" height="15" fill="rgb(209,150,17)"/><text x="28.9304%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (6 samples, 0.19%)</title><rect x="28.7122%" y="453" width="0.1908%" height="15" fill="rgb(234,202,34)"/><text x="28.9622%" y="463.50"></text></g><g><title>core::str::converts::from_utf8 (35 samples, 1.11%)</title><rect x="28.9030%" y="453" width="1.1129%" height="15" fill="rgb(253,148,53)"/><text x="29.1530%" y="463.50"></text></g><g><title>core::str::validations::run_utf8_validation (16 samples, 0.51%)</title><rect x="29.5072%" y="437" width="0.5087%" height="15" fill="rgb(218,129,16)"/><text x="29.7572%" y="447.50"></text></g><g><title>rusqlite::column::&lt;impl rusqlite::row::Row&gt;::column_count (3 samples, 0.10%)</title><rect x="30.0159%" y="453" width="0.0954%" height="15" fill="rgb(216,85,19)"/><text x="30.2659%" y="463.50"></text></g><g><title>rusqlite::column::&lt;impl rusqlite::statement::Statement&gt;::column_count (2 samples, 0.06%)</title><rect x="30.0477%" y="437" width="0.0636%" height="15" fill="rgb(235,228,7)"/><text x="30.2977%" y="447.50"></text></g><g><title>rusqlite::raw_statement::RawStatement::column_count (2 samples, 0.06%)</title><rect x="30.0477%" y="421" width="0.0636%" height="15" fill="rgb(245,175,0)"/><text x="30.2977%" y="431.50"></text></g><g><title>sqlite3_column_count (1 samples, 0.03%)</title><rect x="30.0795%" y="405" width="0.0318%" height="15" fill="rgb(208,168,36)"/><text x="30.3295%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (3 samples, 0.10%)</title><rect x="30.2703%" y="421" width="0.0954%" height="15" fill="rgb(246,171,24)"/><text x="30.5203%" y="431.50"></text></g><g><title>&lt;usize as rusqlite::row::RowIndex&gt;::idx (6 samples, 0.19%)</title><rect x="30.3657%" y="421" width="0.1908%" height="15" fill="rgb(215,142,24)"/><text x="30.6157%" y="431.50"></text></g><g><title>rusqlite::column::&lt;impl rusqlite::statement::Statement&gt;::column_count (6 samples, 0.19%)</title><rect x="30.3657%" y="405" width="0.1908%" height="15" fill="rgb(250,187,7)"/><text x="30.6157%" y="415.50"></text></g><g><title>rusqlite::raw_statement::RawStatement::column_count (6 samples, 0.19%)</title><rect x="30.3657%" y="389" width="0.1908%" height="15" fill="rgb(228,66,33)"/><text x="30.6157%" y="399.50"></text></g><g><title>sqlite3_column_count (3 samples, 0.10%)</title><rect x="30.4610%" y="373" width="0.0954%" height="15" fill="rgb(234,215,21)"/><text x="30.7110%" y="383.50"></text></g><g><title>[libsqlite3.so.0.8.6] (31 samples, 0.99%)</title><rect x="31.7011%" y="373" width="0.9857%" height="15" fill="rgb(222,191,20)"/><text x="31.9511%" y="383.50"></text></g><g><title>sqlite3_mutex_enter (1 samples, 0.03%)</title><rect x="32.6550%" y="357" width="0.0318%" height="15" fill="rgb(245,79,54)"/><text x="32.9050%" y="367.50"></text></g><g><title>rusqlite::raw_statement::RawStatement::column_type (51 samples, 1.62%)</title><rect x="31.4467%" y="405" width="1.6216%" height="15" fill="rgb(240,10,37)"/><text x="31.6967%" y="415.50"></text></g><g><title>sqlite3_column_type (50 samples, 1.59%)</title><rect x="31.4785%" y="389" width="1.5898%" height="15" fill="rgb(214,192,32)"/><text x="31.7285%" y="399.50"></text></g><g><title>sqlite3_value_type (12 samples, 0.38%)</title><rect x="32.6868%" y="373" width="0.3816%" height="15" fill="rgb(209,36,54)"/><text x="32.9368%" y="383.50"></text></g><g><title>[libsqlite3.so.0.8.6] (22 samples, 0.70%)</title><rect x="33.2909%" y="389" width="0.6995%" height="15" fill="rgb(220,10,11)"/><text x="33.5409%" y="399.50"></text></g><g><title>sqlite3_mutex_leave (1 samples, 0.03%)</title><rect x="33.9905%" y="389" width="0.0318%" height="15" fill="rgb(221,106,17)"/><text x="34.2405%" y="399.50"></text></g><g><title>sqlite3_column_bytes (32 samples, 1.02%)</title><rect x="33.0684%" y="405" width="1.0175%" height="15" fill="rgb(251,142,44)"/><text x="33.3184%" y="415.50"></text></g><g><title>sqlite3_value_bytes (2 samples, 0.06%)</title><rect x="34.0223%" y="389" width="0.0636%" height="15" fill="rgb(238,13,15)"/><text x="34.2723%" y="399.50"></text></g><g><title>[libsqlite3.so.0.8.6] (22 samples, 0.70%)</title><rect x="34.4674%" y="389" width="0.6995%" height="15" fill="rgb(208,107,27)"/><text x="34.7174%" y="399.50"></text></g><g><title>sqlite3_mutex_enter (1 samples, 0.03%)</title><rect x="35.1351%" y="373" width="0.0318%" height="15" fill="rgb(205,136,37)"/><text x="35.3851%" y="383.50"></text></g><g><title>sqlite3_column_int64 (35 samples, 1.11%)</title><rect x="34.0859%" y="405" width="1.1129%" height="15" fill="rgb(250,205,27)"/><text x="34.3359%" y="415.50"></text></g><g><title>sqlite3_value_int64 (1 samples, 0.03%)</title><rect x="35.1669%" y="389" width="0.0318%" height="15" fill="rgb(210,80,43)"/><text x="35.4169%" y="399.50"></text></g><g><title>[libsqlite3.so.0.8.6] (33 samples, 1.05%)</title><rect x="35.4213%" y="389" width="1.0493%" height="15" fill="rgb(247,160,36)"/><text x="35.6713%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (530 samples, 16.85%)</title><rect x="19.6502%" y="533" width="16.8521%" height="15" fill="rgb(234,13,49)"/><text x="19.9002%" y="543.50">core::option::Option&lt;T&gt;::m..</text></g><g><title>&lt;rusqlite::row::MappedRows&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (527 samples, 16.76%)</title><rect x="19.7456%" y="517" width="16.7568%" height="15" fill="rgb(234,122,0)"/><text x="19.9956%" y="527.50">&lt;rusqlite::row::MappedRows..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (526 samples, 16.72%)</title><rect x="19.7774%" y="501" width="16.7250%" height="15" fill="rgb(207,146,38)"/><text x="20.0274%" y="511.50">core::result::Result&lt;T,E&gt;:..</text></g><g><title>&lt;rusqlite::row::MappedRows&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}}::{{closure}} (526 samples, 16.72%)</title><rect x="19.7774%" y="485" width="16.7250%" height="15" fill="rgb(207,177,25)"/><text x="20.0274%" y="495.50">&lt;rusqlite::row::MappedRows..</text></g><g><title>qsv::db::Db::execute::{{closure}} (526 samples, 16.72%)</title><rect x="19.7774%" y="469" width="16.7250%" height="15" fill="rgb(211,178,42)"/><text x="20.0274%" y="479.50">qsv::db::Db::execute::{{cl..</text></g><g><title>rusqlite::row::Row::get_ref_unwrap (201 samples, 6.39%)</title><rect x="30.1113%" y="453" width="6.3911%" height="15" fill="rgb(230,69,54)"/><text x="30.3613%" y="463.50">rusqlite..</text></g><g><title>rusqlite::row::Row::get_ref (201 samples, 6.39%)</title><rect x="30.1113%" y="437" width="6.3911%" height="15" fill="rgb(214,135,41)"/><text x="30.3613%" y="447.50">rusqlite..</text></g><g><title>rusqlite::statement::Statement::value_ref (187 samples, 5.95%)</title><rect x="30.5564%" y="421" width="5.9459%" height="15" fill="rgb(237,67,25)"/><text x="30.8064%" y="431.50">rusqlite..</text></g><g><title>sqlite3_column_text (41 samples, 1.30%)</title><rect x="35.1987%" y="405" width="1.3037%" height="15" fill="rgb(222,189,50)"/><text x="35.4487%" y="415.50"></text></g><g><title>sqlite3_value_text (1 samples, 0.03%)</title><rect x="36.4706%" y="389" width="0.0318%" height="15" fill="rgb(245,148,34)"/><text x="36.7206%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (6 samples, 0.19%)</title><rect x="36.5024%" y="517" width="0.1908%" height="15" fill="rgb(222,29,6)"/><text x="36.7524%" y="527.50"></text></g><g><title>[libsqlite3.so.0.8.6] (130 samples, 4.13%)</title><rect x="44.7695%" y="437" width="4.1335%" height="15" fill="rgb(221,189,43)"/><text x="45.0195%" y="447.50">[libs..</text></g><g><title>[libsqlite3.so.0.8.6] (10 samples, 0.32%)</title><rect x="48.5851%" y="421" width="0.3180%" height="15" fill="rgb(207,36,27)"/><text x="48.8351%" y="431.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="48.8712%" y="405" width="0.0318%" height="15" fill="rgb(217,90,24)"/><text x="49.1212%" y="415.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="48.8712%" y="389" width="0.0318%" height="15" fill="rgb(224,66,35)"/><text x="49.1212%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.9030%" y="437" width="0.0318%" height="15" fill="rgb(221,13,50)"/><text x="49.1530%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.03%)</title><rect x="48.9348%" y="437" width="0.0318%" height="15" fill="rgb(236,68,49)"/><text x="49.1848%" y="447.50"></text></g><g><title>[libsqlite3.so.0.8.6] (363 samples, 11.54%)</title><rect x="37.5517%" y="453" width="11.5421%" height="15" fill="rgb(229,146,28)"/><text x="37.8017%" y="463.50">[libsqlite3.so.0...</text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.13%)</title><rect x="48.9666%" y="437" width="0.1272%" height="15" fill="rgb(225,31,38)"/><text x="49.2166%" y="447.50"></text></g><g><title>&lt;rusqlite::row::MappedRows&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (927 samples, 29.48%)</title><rect x="19.6502%" y="549" width="29.4754%" height="15" fill="rgb(250,208,3)"/><text x="19.9002%" y="559.50">&lt;rusqlite::row::MappedRows&lt;F&gt; as core::iter::tr..</text></g><g><title>rusqlite::row::Rows::next (397 samples, 12.62%)</title><rect x="36.5024%" y="533" width="12.6232%" height="15" fill="rgb(246,54,23)"/><text x="36.7524%" y="543.50">rusqlite::row::Rows..</text></g><g><title>&lt;rusqlite::row::Rows as fallible_streaming_iterator::FallibleStreamingIterator&gt;::advance (391 samples, 12.43%)</title><rect x="36.6932%" y="517" width="12.4324%" height="15" fill="rgb(243,76,11)"/><text x="36.9432%" y="527.50">&lt;rusqlite::row::Row..</text></g><g><title>rusqlite::statement::Statement::step (390 samples, 12.40%)</title><rect x="36.7250%" y="501" width="12.4006%" height="15" fill="rgb(245,21,50)"/><text x="36.9750%" y="511.50">rusqlite::statement..</text></g><g><title>rusqlite::raw_statement::RawStatement::step (390 samples, 12.40%)</title><rect x="36.7250%" y="485" width="12.4006%" height="15" fill="rgb(228,9,43)"/><text x="36.9750%" y="495.50">rusqlite::raw_state..</text></g><g><title>sqlite3_step (388 samples, 12.34%)</title><rect x="36.7886%" y="469" width="12.3370%" height="15" fill="rgb(208,100,47)"/><text x="37.0386%" y="479.50">sqlite3_step</text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="49.0938%" y="453" width="0.0318%" height="15" fill="rgb(232,26,8)"/><text x="49.3438%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="49.0938%" y="437" width="0.0318%" height="15" fill="rgb(216,166,38)"/><text x="49.3438%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="49.0938%" y="421" width="0.0318%" height="15" fill="rgb(251,202,51)"/><text x="49.3438%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="49.0938%" y="405" width="0.0318%" height="15" fill="rgb(254,216,34)"/><text x="49.3438%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="49.0938%" y="389" width="0.0318%" height="15" fill="rgb(251,32,27)"/><text x="49.3438%" y="399.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write (10 samples, 0.32%)</title><rect x="49.1256%" y="549" width="0.3180%" height="15" fill="rgb(208,127,28)"/><text x="49.3756%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (9 samples, 0.29%)</title><rect x="49.1574%" y="533" width="0.2862%" height="15" fill="rgb(224,137,22)"/><text x="49.4074%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.29%)</title><rect x="49.1574%" y="517" width="0.2862%" height="15" fill="rgb(254,70,32)"/><text x="49.4074%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (9 samples, 0.29%)</title><rect x="49.1574%" y="501" width="0.2862%" height="15" fill="rgb(229,75,37)"/><text x="49.4074%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (8 samples, 0.25%)</title><rect x="49.1892%" y="485" width="0.2544%" height="15" fill="rgb(252,64,23)"/><text x="49.4392%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.22%)</title><rect x="49.2210%" y="469" width="0.2226%" height="15" fill="rgb(232,162,48)"/><text x="49.4710%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="49.4118%" y="453" width="0.0318%" height="15" fill="rgb(246,160,12)"/><text x="49.6618%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (6 samples, 0.19%)</title><rect x="49.4436%" y="533" width="0.1908%" height="15" fill="rgb(247,166,0)"/><text x="49.6936%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.19%)</title><rect x="49.4436%" y="517" width="0.1908%" height="15" fill="rgb(249,219,21)"/><text x="49.6936%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (6 samples, 0.19%)</title><rect x="49.4436%" y="501" width="0.1908%" height="15" fill="rgb(205,209,3)"/><text x="49.6936%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.19%)</title><rect x="49.4436%" y="485" width="0.1908%" height="15" fill="rgb(243,44,1)"/><text x="49.6936%" y="495.50"></text></g><g><title>__memcpy_avx_unaligned (5 samples, 0.16%)</title><rect x="49.4754%" y="469" width="0.1590%" height="15" fill="rgb(206,159,16)"/><text x="49.7254%" y="479.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (51 samples, 1.62%)</title><rect x="49.4436%" y="549" width="1.6216%" height="15" fill="rgb(244,77,30)"/><text x="49.6936%" y="559.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (45 samples, 1.43%)</title><rect x="49.6343%" y="533" width="1.4308%" height="15" fill="rgb(218,69,12)"/><text x="49.8843%" y="543.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (45 samples, 1.43%)</title><rect x="49.6343%" y="517" width="1.4308%" height="15" fill="rgb(212,87,7)"/><text x="49.8843%" y="527.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write (44 samples, 1.40%)</title><rect x="49.6661%" y="501" width="1.3990%" height="15" fill="rgb(245,114,25)"/><text x="49.9161%" y="511.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (44 samples, 1.40%)</title><rect x="49.6661%" y="485" width="1.3990%" height="15" fill="rgb(210,61,42)"/><text x="49.9161%" y="495.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (44 samples, 1.40%)</title><rect x="49.6661%" y="469" width="1.3990%" height="15" fill="rgb(211,52,33)"/><text x="49.9161%" y="479.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (44 samples, 1.40%)</title><rect x="49.6661%" y="453" width="1.3990%" height="15" fill="rgb(234,58,33)"/><text x="49.9161%" y="463.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (44 samples, 1.40%)</title><rect x="49.6661%" y="437" width="1.3990%" height="15" fill="rgb(220,115,36)"/><text x="49.9161%" y="447.50"></text></g><g><title>__libc_write (44 samples, 1.40%)</title><rect x="49.6661%" y="421" width="1.3990%" height="15" fill="rgb(243,153,54)"/><text x="49.9161%" y="431.50"></text></g><g><title>[unknown] (44 samples, 1.40%)</title><rect x="49.6661%" y="405" width="1.3990%" height="15" fill="rgb(251,47,18)"/><text x="49.9161%" y="415.50"></text></g><g><title>[unknown] (44 samples, 1.40%)</title><rect x="49.6661%" y="389" width="1.3990%" height="15" fill="rgb(242,102,42)"/><text x="49.9161%" y="399.50"></text></g><g><title>[unknown] (44 samples, 1.40%)</title><rect x="49.6661%" y="373" width="1.3990%" height="15" fill="rgb(234,31,38)"/><text x="49.9161%" y="383.50"></text></g><g><title>[unknown] (44 samples, 1.40%)</title><rect x="49.6661%" y="357" width="1.3990%" height="15" fill="rgb(221,117,51)"/><text x="49.9161%" y="367.50"></text></g><g><title>[unknown] (44 samples, 1.40%)</title><rect x="49.6661%" y="341" width="1.3990%" height="15" fill="rgb(212,20,18)"/><text x="49.9161%" y="351.50"></text></g><g><title>[unknown] (44 samples, 1.40%)</title><rect x="49.6661%" y="325" width="1.3990%" height="15" fill="rgb(245,133,36)"/><text x="49.9161%" y="335.50"></text></g><g><title>[unknown] (44 samples, 1.40%)</title><rect x="49.6661%" y="309" width="1.3990%" height="15" fill="rgb(212,6,19)"/><text x="49.9161%" y="319.50"></text></g><g><title>[unknown] (41 samples, 1.30%)</title><rect x="49.7615%" y="293" width="1.3037%" height="15" fill="rgb(218,1,36)"/><text x="50.0115%" y="303.50"></text></g><g><title>[unknown] (39 samples, 1.24%)</title><rect x="49.8251%" y="277" width="1.2401%" height="15" fill="rgb(246,84,54)"/><text x="50.0751%" y="287.50"></text></g><g><title>[unknown] (38 samples, 1.21%)</title><rect x="49.8569%" y="261" width="1.2083%" height="15" fill="rgb(242,110,6)"/><text x="50.1069%" y="271.50"></text></g><g><title>[unknown] (35 samples, 1.11%)</title><rect x="49.9523%" y="245" width="1.1129%" height="15" fill="rgb(214,47,5)"/><text x="50.2023%" y="255.50"></text></g><g><title>[unknown] (32 samples, 1.02%)</title><rect x="50.0477%" y="229" width="1.0175%" height="15" fill="rgb(218,159,25)"/><text x="50.2977%" y="239.50"></text></g><g><title>[unknown] (26 samples, 0.83%)</title><rect x="50.2385%" y="213" width="0.8267%" height="15" fill="rgb(215,211,28)"/><text x="50.4885%" y="223.50"></text></g><g><title>[unknown] (24 samples, 0.76%)</title><rect x="50.3021%" y="197" width="0.7631%" height="15" fill="rgb(238,59,32)"/><text x="50.5521%" y="207.50"></text></g><g><title>[unknown] (22 samples, 0.70%)</title><rect x="50.3657%" y="181" width="0.6995%" height="15" fill="rgb(226,82,3)"/><text x="50.6157%" y="191.50"></text></g><g><title>[unknown] (20 samples, 0.64%)</title><rect x="50.4293%" y="165" width="0.6359%" height="15" fill="rgb(240,164,32)"/><text x="50.6793%" y="175.50"></text></g><g><title>[unknown] (19 samples, 0.60%)</title><rect x="50.4610%" y="149" width="0.6041%" height="15" fill="rgb(232,46,7)"/><text x="50.7110%" y="159.50"></text></g><g><title>[unknown] (16 samples, 0.51%)</title><rect x="50.5564%" y="133" width="0.5087%" height="15" fill="rgb(229,129,53)"/><text x="50.8064%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.16%)</title><rect x="50.9062%" y="117" width="0.1590%" height="15" fill="rgb(234,188,29)"/><text x="51.1562%" y="127.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="51.0016%" y="101" width="0.0636%" height="15" fill="rgb(246,141,4)"/><text x="51.2516%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="51.0334%" y="85" width="0.0318%" height="15" fill="rgb(229,23,39)"/><text x="51.2834%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="51.0334%" y="69" width="0.0318%" height="15" fill="rgb(206,12,3)"/><text x="51.2834%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="51.0334%" y="53" width="0.0318%" height="15" fill="rgb(252,226,20)"/><text x="51.2834%" y="63.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (5 samples, 0.16%)</title><rect x="51.4467%" y="501" width="0.1590%" height="15" fill="rgb(216,123,35)"/><text x="51.6967%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="51.6057%" y="501" width="0.0318%" height="15" fill="rgb(212,68,40)"/><text x="51.8557%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="51.7011%" y="453" width="0.0318%" height="15" fill="rgb(254,125,32)"/><text x="51.9511%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="51.7011%" y="437" width="0.0318%" height="15" fill="rgb(253,97,22)"/><text x="51.9511%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.03%)</title><rect x="51.7329%" y="437" width="0.0318%" height="15" fill="rgb(241,101,14)"/><text x="51.9829%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 0.16%)</title><rect x="51.6375%" y="501" width="0.1590%" height="15" fill="rgb(238,103,29)"/><text x="51.8875%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.16%)</title><rect x="51.6375%" y="485" width="0.1590%" height="15" fill="rgb(233,195,47)"/><text x="51.8875%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (5 samples, 0.16%)</title><rect x="51.6375%" y="469" width="0.1590%" height="15" fill="rgb(246,218,30)"/><text x="51.8875%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="51.7329%" y="453" width="0.0636%" height="15" fill="rgb(219,145,47)"/><text x="51.9829%" y="463.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.03%)</title><rect x="51.7647%" y="437" width="0.0318%" height="15" fill="rgb(243,12,26)"/><text x="52.0147%" y="447.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.16%)</title><rect x="51.8601%" y="389" width="0.1590%" height="15" fill="rgb(214,87,16)"/><text x="52.1101%" y="399.50"></text></g><g><title>tcache_get (4 samples, 0.13%)</title><rect x="51.8919%" y="373" width="0.1272%" height="15" fill="rgb(208,99,42)"/><text x="52.1419%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (8 samples, 0.25%)</title><rect x="51.7965%" y="501" width="0.2544%" height="15" fill="rgb(253,99,2)"/><text x="52.0465%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.25%)</title><rect x="51.7965%" y="485" width="0.2544%" height="15" fill="rgb(220,168,23)"/><text x="52.0465%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.22%)</title><rect x="51.8283%" y="469" width="0.2226%" height="15" fill="rgb(242,38,24)"/><text x="52.0783%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.22%)</title><rect x="51.8283%" y="453" width="0.2226%" height="15" fill="rgb(225,182,9)"/><text x="52.0783%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.22%)</title><rect x="51.8283%" y="437" width="0.2226%" height="15" fill="rgb(243,178,37)"/><text x="52.0783%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.22%)</title><rect x="51.8283%" y="421" width="0.2226%" height="15" fill="rgb(232,139,19)"/><text x="52.0783%" y="431.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.19%)</title><rect x="51.8601%" y="405" width="0.1908%" height="15" fill="rgb(225,201,24)"/><text x="52.1101%" y="415.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="52.0191%" y="389" width="0.0318%" height="15" fill="rgb(221,47,46)"/><text x="52.2691%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (3 samples, 0.10%)</title><rect x="52.0509%" y="501" width="0.0954%" height="15" fill="rgb(249,23,13)"/><text x="52.3009%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (3 samples, 0.10%)</title><rect x="52.0509%" y="485" width="0.0954%" height="15" fill="rgb(219,9,5)"/><text x="52.3009%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2 samples, 0.06%)</title><rect x="52.1463%" y="501" width="0.0636%" height="15" fill="rgb(254,171,16)"/><text x="52.3963%" y="511.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.03%)</title><rect x="52.2417%" y="469" width="0.0318%" height="15" fill="rgb(230,171,20)"/><text x="52.4917%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (6 samples, 0.19%)</title><rect x="52.2099%" y="501" width="0.1908%" height="15" fill="rgb(210,71,41)"/><text x="52.4599%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.19%)</title><rect x="52.2099%" y="485" width="0.1908%" height="15" fill="rgb(206,173,20)"/><text x="52.4599%" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.13%)</title><rect x="52.2734%" y="469" width="0.1272%" height="15" fill="rgb(233,88,34)"/><text x="52.5234%" y="479.50"></text></g><g><title>alloc::str::join_generic_copy (37 samples, 1.18%)</title><rect x="51.2560%" y="517" width="1.1765%" height="15" fill="rgb(223,209,46)"/><text x="51.5060%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (1 samples, 0.03%)</title><rect x="52.4006%" y="501" width="0.0318%" height="15" fill="rgb(250,43,18)"/><text x="52.6506%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut_unchecked (1 samples, 0.03%)</title><rect x="52.4006%" y="485" width="0.0318%" height="15" fill="rgb(208,13,10)"/><text x="52.6506%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="52.4006%" y="469" width="0.0318%" height="15" fill="rgb(212,200,36)"/><text x="52.6506%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="52.4006%" y="453" width="0.0318%" height="15" fill="rgb(225,90,30)"/><text x="52.6506%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::join (46 samples, 1.46%)</title><rect x="51.0652%" y="549" width="1.4626%" height="15" fill="rgb(236,182,39)"/><text x="51.3152%" y="559.50"></text></g><g><title>alloc::str::&lt;impl alloc::slice::Join&lt;&amp;str&gt; for [S]&gt;::join (46 samples, 1.46%)</title><rect x="51.0652%" y="533" width="1.4626%" height="15" fill="rgb(212,144,35)"/><text x="51.3152%" y="543.50"></text></g><g><title>alloc::string::String::from_utf8_unchecked (3 samples, 0.10%)</title><rect x="52.4324%" y="517" width="0.0954%" height="15" fill="rgb(228,63,44)"/><text x="52.6824%" y="527.50"></text></g><g><title>alloc::string::String::as_str (7 samples, 0.22%)</title><rect x="52.5278%" y="549" width="0.2226%" height="15" fill="rgb(228,109,6)"/><text x="52.7778%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (7 samples, 0.22%)</title><rect x="52.5278%" y="533" width="0.2226%" height="15" fill="rgb(238,117,24)"/><text x="52.7778%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.22%)</title><rect x="52.5278%" y="517" width="0.2226%" height="15" fill="rgb(242,26,26)"/><text x="52.7778%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (7 samples, 0.22%)</title><rect x="52.5278%" y="501" width="0.2226%" height="15" fill="rgb(221,92,48)"/><text x="52.7778%" y="511.50"></text></g><g><title>__GI___libc_free (4 samples, 0.13%)</title><rect x="52.7504%" y="453" width="0.1272%" height="15" fill="rgb(209,209,32)"/><text x="53.0004%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (16 samples, 0.51%)</title><rect x="52.7504%" y="549" width="0.5087%" height="15" fill="rgb(221,70,22)"/><text x="53.0004%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (16 samples, 0.51%)</title><rect x="52.7504%" y="533" width="0.5087%" height="15" fill="rgb(248,145,5)"/><text x="53.0004%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (16 samples, 0.51%)</title><rect x="52.7504%" y="517" width="0.5087%" height="15" fill="rgb(226,116,26)"/><text x="53.0004%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.51%)</title><rect x="52.7504%" y="501" width="0.5087%" height="15" fill="rgb(244,5,17)"/><text x="53.0004%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.51%)</title><rect x="52.7504%" y="485" width="0.5087%" height="15" fill="rgb(252,159,33)"/><text x="53.0004%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.51%)</title><rect x="52.7504%" y="469" width="0.5087%" height="15" fill="rgb(206,71,0)"/><text x="53.0004%" y="479.50"></text></g><g><title>_int_free (12 samples, 0.38%)</title><rect x="52.8776%" y="453" width="0.3816%" height="15" fill="rgb(233,118,54)"/><text x="53.1276%" y="463.50"></text></g><g><title>__GI___libc_free (12 samples, 0.38%)</title><rect x="53.2909%" y="405" width="0.3816%" height="15" fill="rgb(234,83,48)"/><text x="53.5409%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.7218%" y="389" width="0.0318%" height="15" fill="rgb(228,3,54)"/><text x="54.9718%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.7218%" y="373" width="0.0318%" height="15" fill="rgb(226,155,13)"/><text x="54.9718%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.7218%" y="357" width="0.0318%" height="15" fill="rgb(241,28,37)"/><text x="54.9718%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.7218%" y="341" width="0.0318%" height="15" fill="rgb(233,93,10)"/><text x="54.9718%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.7218%" y="325" width="0.0318%" height="15" fill="rgb(225,113,19)"/><text x="54.9718%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.7218%" y="309" width="0.0318%" height="15" fill="rgb(241,2,18)"/><text x="54.9718%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.7218%" y="293" width="0.0318%" height="15" fill="rgb(228,207,21)"/><text x="54.9718%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.7218%" y="277" width="0.0318%" height="15" fill="rgb(213,211,35)"/><text x="54.9718%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.7218%" y="261" width="0.0318%" height="15" fill="rgb(209,83,10)"/><text x="54.9718%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.7218%" y="245" width="0.0318%" height="15" fill="rgb(209,164,1)"/><text x="54.9718%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.7218%" y="229" width="0.0318%" height="15" fill="rgb(213,184,43)"/><text x="54.9718%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.7218%" y="213" width="0.0318%" height="15" fill="rgb(231,61,34)"/><text x="54.9718%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.7218%" y="197" width="0.0318%" height="15" fill="rgb(235,75,3)"/><text x="54.9718%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.7218%" y="181" width="0.0318%" height="15" fill="rgb(220,106,47)"/><text x="54.9718%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (50 samples, 1.59%)</title><rect x="53.2909%" y="437" width="1.5898%" height="15" fill="rgb(210,196,33)"/><text x="53.5409%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (50 samples, 1.59%)</title><rect x="53.2909%" y="421" width="1.5898%" height="15" fill="rgb(229,154,42)"/><text x="53.5409%" y="431.50"></text></g><g><title>_int_free (38 samples, 1.21%)</title><rect x="53.6725%" y="405" width="1.2083%" height="15" fill="rgb(228,114,26)"/><text x="53.9225%" y="415.50"></text></g><g><title>tcache_put (4 samples, 0.13%)</title><rect x="54.7536%" y="389" width="0.1272%" height="15" fill="rgb(208,144,1)"/><text x="55.0036%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 1.84%)</title><rect x="53.2591%" y="533" width="1.8442%" height="15" fill="rgb(239,112,37)"/><text x="53.5091%" y="543.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (58 samples, 1.84%)</title><rect x="53.2591%" y="517" width="1.8442%" height="15" fill="rgb(210,96,50)"/><text x="53.5091%" y="527.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (57 samples, 1.81%)</title><rect x="53.2909%" y="501" width="1.8124%" height="15" fill="rgb(222,178,2)"/><text x="53.5409%" y="511.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (57 samples, 1.81%)</title><rect x="53.2909%" y="485" width="1.8124%" height="15" fill="rgb(226,74,18)"/><text x="53.5409%" y="495.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (57 samples, 1.81%)</title><rect x="53.2909%" y="469" width="1.8124%" height="15" fill="rgb(225,67,54)"/><text x="53.5409%" y="479.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (57 samples, 1.81%)</title><rect x="53.2909%" y="453" width="1.8124%" height="15" fill="rgb(251,92,32)"/><text x="53.5409%" y="463.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (7 samples, 0.22%)</title><rect x="54.8808%" y="437" width="0.2226%" height="15" fill="rgb(228,149,22)"/><text x="55.1308%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="55.0715%" y="421" width="0.0318%" height="15" fill="rgb(243,54,13)"/><text x="55.3215%" y="431.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="55.1033%" y="469" width="0.0318%" height="15" fill="rgb(243,180,28)"/><text x="55.3533%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (71 samples, 2.26%)</title><rect x="53.2591%" y="549" width="2.2576%" height="15" fill="rgb(208,167,24)"/><text x="53.5091%" y="559.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (13 samples, 0.41%)</title><rect x="55.1033%" y="533" width="0.4134%" height="15" fill="rgb(245,73,45)"/><text x="55.3533%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.41%)</title><rect x="55.1033%" y="517" width="0.4134%" height="15" fill="rgb(237,203,48)"/><text x="55.3533%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.41%)</title><rect x="55.1033%" y="501" width="0.4134%" height="15" fill="rgb(211,197,16)"/><text x="55.3533%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.41%)</title><rect x="55.1033%" y="485" width="0.4134%" height="15" fill="rgb(243,99,51)"/><text x="55.3533%" y="495.50"></text></g><g><title>_int_free (12 samples, 0.38%)</title><rect x="55.1351%" y="469" width="0.3816%" height="15" fill="rgb(215,123,29)"/><text x="55.3851%" y="479.50"></text></g><g><title>tcache_put (1 samples, 0.03%)</title><rect x="55.4849%" y="453" width="0.0318%" height="15" fill="rgb(239,186,37)"/><text x="55.7349%" y="463.50"></text></g><g><title>qsv::db::Db::execute (1,133 samples, 36.03%)</title><rect x="19.5866%" y="565" width="36.0254%" height="15" fill="rgb(252,136,39)"/><text x="19.8366%" y="575.50">qsv::db::Db::execute</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (3 samples, 0.10%)</title><rect x="55.5167%" y="549" width="0.0954%" height="15" fill="rgb(223,213,32)"/><text x="55.7667%" y="559.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="55.7075%" y="421" width="0.0318%" height="15" fill="rgb(233,115,5)"/><text x="55.9575%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.29%)</title><rect x="55.6757%" y="453" width="0.2862%" height="15" fill="rgb(207,226,44)"/><text x="55.9257%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.29%)</title><rect x="55.6757%" y="437" width="0.2862%" height="15" fill="rgb(208,126,0)"/><text x="55.9257%" y="447.50"></text></g><g><title>_int_free (7 samples, 0.22%)</title><rect x="55.7393%" y="421" width="0.2226%" height="15" fill="rgb(244,66,21)"/><text x="55.9893%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.32%)</title><rect x="55.6757%" y="533" width="0.3180%" height="15" fill="rgb(222,97,12)"/><text x="55.9257%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;&amp;str&gt;]&gt; (10 samples, 0.32%)</title><rect x="55.6757%" y="517" width="0.3180%" height="15" fill="rgb(219,213,19)"/><text x="55.9257%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;str&gt;&gt; (10 samples, 0.32%)</title><rect x="55.6757%" y="501" width="0.3180%" height="15" fill="rgb(252,169,30)"/><text x="55.9257%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;str&gt;&gt; (10 samples, 0.32%)</title><rect x="55.6757%" y="485" width="0.3180%" height="15" fill="rgb(206,32,51)"/><text x="55.9257%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.32%)</title><rect x="55.6757%" y="469" width="0.3180%" height="15" fill="rgb(250,172,42)"/><text x="55.9257%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.03%)</title><rect x="55.9618%" y="453" width="0.0318%" height="15" fill="rgb(209,34,43)"/><text x="56.2118%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;&amp;str&gt;&gt;&gt; (12 samples, 0.38%)</title><rect x="55.6757%" y="549" width="0.3816%" height="15" fill="rgb(223,11,35)"/><text x="55.9257%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;&amp;str&gt;&gt;&gt; (2 samples, 0.06%)</title><rect x="55.9936%" y="533" width="0.0636%" height="15" fill="rgb(251,219,26)"/><text x="56.2436%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="55.9936%" y="517" width="0.0636%" height="15" fill="rgb(231,119,3)"/><text x="56.2436%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.06%)</title><rect x="55.9936%" y="501" width="0.0636%" height="15" fill="rgb(216,97,11)"/><text x="56.2436%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.06%)</title><rect x="55.9936%" y="485" width="0.0636%" height="15" fill="rgb(223,59,9)"/><text x="56.2436%" y="495.50"></text></g><g><title>__GI_munmap (2 samples, 0.06%)</title><rect x="55.9936%" y="469" width="0.0636%" height="15" fill="rgb(233,93,31)"/><text x="56.2436%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="55.9936%" y="453" width="0.0636%" height="15" fill="rgb(239,81,33)"/><text x="56.2436%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="55.9936%" y="437" width="0.0636%" height="15" fill="rgb(213,120,34)"/><text x="56.2436%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="55.9936%" y="421" width="0.0636%" height="15" fill="rgb(243,49,53)"/><text x="56.2436%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="55.9936%" y="405" width="0.0636%" height="15" fill="rgb(247,216,33)"/><text x="56.2436%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="55.9936%" y="389" width="0.0636%" height="15" fill="rgb(226,26,14)"/><text x="56.2436%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="55.9936%" y="373" width="0.0636%" height="15" fill="rgb(215,49,53)"/><text x="56.2436%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="55.9936%" y="357" width="0.0636%" height="15" fill="rgb(245,162,40)"/><text x="56.2436%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="55.9936%" y="341" width="0.0636%" height="15" fill="rgb(229,68,17)"/><text x="56.2436%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="55.9936%" y="325" width="0.0636%" height="15" fill="rgb(213,182,10)"/><text x="56.2436%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="55.9936%" y="309" width="0.0636%" height="15" fill="rgb(245,125,30)"/><text x="56.2436%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="56.0254%" y="293" width="0.0318%" height="15" fill="rgb(232,202,2)"/><text x="56.2754%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="56.0254%" y="277" width="0.0318%" height="15" fill="rgb(237,140,51)"/><text x="56.2754%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="56.0254%" y="261" width="0.0318%" height="15" fill="rgb(236,157,25)"/><text x="56.2754%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="56.0254%" y="245" width="0.0318%" height="15" fill="rgb(219,209,0)"/><text x="56.2754%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="56.0254%" y="229" width="0.0318%" height="15" fill="rgb(240,116,54)"/><text x="56.2754%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="56.0254%" y="213" width="0.0318%" height="15" fill="rgb(216,10,36)"/><text x="56.2754%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="56.0254%" y="197" width="0.0318%" height="15" fill="rgb(222,72,44)"/><text x="56.2754%" y="207.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.03%)</title><rect x="56.0572%" y="549" width="0.0318%" height="15" fill="rgb(232,159,9)"/><text x="56.3072%" y="559.50"></text></g><g><title>rusqlite::Connection::execute_batch (1 samples, 0.03%)</title><rect x="56.0890%" y="549" width="0.0318%" height="15" fill="rgb(210,39,32)"/><text x="56.3390%" y="559.50"></text></g><g><title>rusqlite::statement::Statement::step (1 samples, 0.03%)</title><rect x="56.0890%" y="533" width="0.0318%" height="15" fill="rgb(216,194,45)"/><text x="56.3390%" y="543.50"></text></g><g><title>rusqlite::raw_statement::RawStatement::step (1 samples, 0.03%)</title><rect x="56.0890%" y="517" width="0.0318%" height="15" fill="rgb(218,18,35)"/><text x="56.3390%" y="527.50"></text></g><g><title>sqlite3_step (1 samples, 0.03%)</title><rect x="56.0890%" y="501" width="0.0318%" height="15" fill="rgb(207,83,51)"/><text x="56.3390%" y="511.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="56.0890%" y="485" width="0.0318%" height="15" fill="rgb(225,63,43)"/><text x="56.3390%" y="495.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="56.0890%" y="469" width="0.0318%" height="15" fill="rgb(207,57,36)"/><text x="56.3390%" y="479.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="56.0890%" y="453" width="0.0318%" height="15" fill="rgb(216,99,33)"/><text x="56.3390%" y="463.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="56.0890%" y="437" width="0.0318%" height="15" fill="rgb(225,42,16)"/><text x="56.3390%" y="447.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="56.0890%" y="421" width="0.0318%" height="15" fill="rgb(220,201,45)"/><text x="56.3390%" y="431.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="56.0890%" y="405" width="0.0318%" height="15" fill="rgb(225,33,4)"/><text x="56.3390%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (11 samples, 0.35%)</title><rect x="56.1526%" y="533" width="0.3498%" height="15" fill="rgb(224,33,50)"/><text x="56.4026%" y="543.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.06%)</title><rect x="56.7568%" y="501" width="0.0636%" height="15" fill="rgb(246,198,51)"/><text x="57.0068%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (2 samples, 0.06%)</title><rect x="56.7568%" y="485" width="0.0636%" height="15" fill="rgb(205,22,4)"/><text x="57.0068%" y="495.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (2 samples, 0.06%)</title><rect x="56.7568%" y="469" width="0.0636%" height="15" fill="rgb(206,3,8)"/><text x="57.0068%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.06%)</title><rect x="56.7568%" y="453" width="0.0636%" height="15" fill="rgb(251,23,15)"/><text x="57.0068%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.06%)</title><rect x="56.7568%" y="437" width="0.0636%" height="15" fill="rgb(252,88,28)"/><text x="57.0068%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (5 samples, 0.16%)</title><rect x="56.8203%" y="501" width="0.1590%" height="15" fill="rgb(212,127,14)"/><text x="57.0703%" y="511.50"></text></g><g><title>rusqlite::raw_statement::RawStatement::bind_parameter_count (2 samples, 0.06%)</title><rect x="56.9793%" y="501" width="0.0636%" height="15" fill="rgb(247,145,37)"/><text x="57.2293%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (3 samples, 0.10%)</title><rect x="57.5517%" y="485" width="0.0954%" height="15" fill="rgb(209,117,53)"/><text x="57.8017%" y="495.50"></text></g><g><title>[libsqlite3.so.0.8.6] (1 samples, 0.03%)</title><rect x="62.3211%" y="389" width="0.0318%" height="15" fill="rgb(212,90,42)"/><text x="62.5711%" y="399.50"></text></g><g><title>[libsqlite3.so.0.8.6] (40 samples, 1.27%)</title><rect x="61.9078%" y="405" width="1.2719%" height="15" fill="rgb(218,164,37)"/><text x="62.1578%" y="415.50"></text></g><g><title>__GI___libc_malloc (26 samples, 0.83%)</title><rect x="62.3529%" y="389" width="0.8267%" height="15" fill="rgb(246,65,34)"/><text x="62.6029%" y="399.50"></text></g><g><title>tcache_get (6 samples, 0.19%)</title><rect x="62.9889%" y="373" width="0.1908%" height="15" fill="rgb(231,100,33)"/><text x="63.2389%" y="383.50"></text></g><g><title>__GI___pthread_mutex_lock (17 samples, 0.54%)</title><rect x="63.1797%" y="405" width="0.5405%" height="15" fill="rgb(228,126,14)"/><text x="63.4297%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (9 samples, 0.29%)</title><rect x="63.7202%" y="405" width="0.2862%" height="15" fill="rgb(215,173,21)"/><text x="63.9702%" y="415.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (8 samples, 0.25%)</title><rect x="63.7520%" y="389" width="0.2544%" height="15" fill="rgb(210,6,40)"/><text x="64.0020%" y="399.50"></text></g><g><title>sqlite3_mutex_enter (2 samples, 0.06%)</title><rect x="64.0064%" y="405" width="0.0636%" height="15" fill="rgb(212,48,18)"/><text x="64.2564%" y="415.50"></text></g><g><title>[libsqlite3.so.0.8.6] (94 samples, 2.99%)</title><rect x="61.1129%" y="437" width="2.9889%" height="15" fill="rgb(230,214,11)"/><text x="61.3629%" y="447.50">[li..</text></g><g><title>[libsqlite3.so.0.8.6] (80 samples, 2.54%)</title><rect x="61.5580%" y="421" width="2.5437%" height="15" fill="rgb(254,105,39)"/><text x="61.8080%" y="431.50">[l..</text></g><g><title>sqlite3_mutex_leave (1 samples, 0.03%)</title><rect x="64.0700%" y="405" width="0.0318%" height="15" fill="rgb(245,158,5)"/><text x="64.3200%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (12 samples, 0.38%)</title><rect x="64.1017%" y="437" width="0.3816%" height="15" fill="rgb(249,208,11)"/><text x="64.3517%" y="447.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (10 samples, 0.32%)</title><rect x="64.1653%" y="421" width="0.3180%" height="15" fill="rgb(210,39,28)"/><text x="64.4153%" y="431.50"></text></g><g><title>[libsqlite3.so.0.8.6] (4 samples, 0.13%)</title><rect x="64.9285%" y="421" width="0.1272%" height="15" fill="rgb(211,56,53)"/><text x="65.1785%" y="431.50"></text></g><g><title>__GI___libc_free (3 samples, 0.10%)</title><rect x="65.0556%" y="421" width="0.0954%" height="15" fill="rgb(226,201,30)"/><text x="65.3056%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (24 samples, 0.76%)</title><rect x="65.1510%" y="421" width="0.7631%" height="15" fill="rgb(239,101,34)"/><text x="65.4010%" y="431.50"></text></g><g><title>_int_free (26 samples, 0.83%)</title><rect x="65.9141%" y="421" width="0.8267%" height="15" fill="rgb(226,209,5)"/><text x="66.1641%" y="431.50"></text></g><g><title>tcache_put (2 samples, 0.06%)</title><rect x="66.6773%" y="405" width="0.0636%" height="15" fill="rgb(250,105,47)"/><text x="66.9273%" y="415.50"></text></g><g><title>sqlite3_free (72 samples, 2.29%)</title><rect x="64.4833%" y="437" width="2.2893%" height="15" fill="rgb(230,72,3)"/><text x="64.7333%" y="447.50">s..</text></g><g><title>sqlite3_mutex_enter (1 samples, 0.03%)</title><rect x="66.7409%" y="421" width="0.0318%" height="15" fill="rgb(232,218,39)"/><text x="66.9909%" y="431.50"></text></g><g><title>[libsqlite3.so.0.8.6] (203 samples, 6.45%)</title><rect x="60.3498%" y="453" width="6.4547%" height="15" fill="rgb(248,166,6)"/><text x="60.5998%" y="463.50">[libsqli..</text></g><g><title>sqlite3_mutex_leave (1 samples, 0.03%)</title><rect x="66.7727%" y="437" width="0.0318%" height="15" fill="rgb(247,89,20)"/><text x="67.0227%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned (3 samples, 0.10%)</title><rect x="66.8045%" y="453" width="0.0954%" height="15" fill="rgb(248,130,54)"/><text x="67.0545%" y="463.50"></text></g><g><title>[libsqlite3.so.0.8.6] (303 samples, 9.63%)</title><rect x="58.3784%" y="469" width="9.6343%" height="15" fill="rgb(234,196,4)"/><text x="58.6284%" y="479.50">[libsqlite3.so..</text></g><g><title>__memmove_avx_unaligned_erms (35 samples, 1.11%)</title><rect x="66.8998%" y="453" width="1.1129%" height="15" fill="rgb(250,143,31)"/><text x="67.1498%" y="463.50"></text></g><g><title>[libsqlite3.so.0.8.6] (327 samples, 10.40%)</title><rect x="57.6471%" y="485" width="10.3975%" height="15" fill="rgb(211,110,34)"/><text x="57.8971%" y="495.50">[libsqlite3.so...</text></g><g><title>sqlite3_mutex_leave (1 samples, 0.03%)</title><rect x="68.0127%" y="469" width="0.0318%" height="15" fill="rgb(215,124,48)"/><text x="68.2627%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="68.0445%" y="485" width="0.0318%" height="15" fill="rgb(216,46,13)"/><text x="68.2945%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.03%)</title><rect x="68.0763%" y="469" width="0.0318%" height="15" fill="rgb(205,184,25)"/><text x="68.3263%" y="479.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.03%)</title><rect x="68.0763%" y="453" width="0.0318%" height="15" fill="rgb(228,1,10)"/><text x="68.3263%" y="463.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.03%)</title><rect x="68.0763%" y="437" width="0.0318%" height="15" fill="rgb(213,116,27)"/><text x="68.3263%" y="447.50"></text></g><g><title>rusqlite::Connection::decode_result (2 samples, 0.06%)</title><rect x="68.0763%" y="485" width="0.0636%" height="15" fill="rgb(241,95,50)"/><text x="68.3263%" y="495.50"></text></g><g><title>rusqlite::inner_connection::InnerConnection::decode_result (1 samples, 0.03%)</title><rect x="68.1081%" y="469" width="0.0318%" height="15" fill="rgb(238,48,32)"/><text x="68.3581%" y="479.50"></text></g><g><title>rusqlite::inner_connection::InnerConnection::decode_result_raw (1 samples, 0.03%)</title><rect x="68.1081%" y="453" width="0.0318%" height="15" fill="rgb(235,113,49)"/><text x="68.3581%" y="463.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (2 samples, 0.06%)</title><rect x="68.5215%" y="469" width="0.0636%" height="15" fill="rgb(205,127,43)"/><text x="68.7715%" y="479.50"></text></g><g><title>rusqlite::str_for_sqlite (16 samples, 0.51%)</title><rect x="68.1399%" y="485" width="0.5087%" height="15" fill="rgb(250,162,2)"/><text x="68.3899%" y="495.50"></text></g><g><title>libsqlite3_sys::SQLITE_TRANSIENT (2 samples, 0.06%)</title><rect x="68.5851%" y="469" width="0.0636%" height="15" fill="rgb(220,13,41)"/><text x="68.8351%" y="479.50"></text></g><g><title>&lt;rusqlite::params::ParamsFromIter&lt;I&gt; as rusqlite::params::Params&gt;::__bind_in (387 samples, 12.31%)</title><rect x="56.5024%" y="533" width="12.3052%" height="15" fill="rgb(249,221,25)"/><text x="56.7524%" y="543.50">&lt;rusqlite::params:..</text></g><g><title>rusqlite::statement::Statement::bind_parameters (387 samples, 12.31%)</title><rect x="56.5024%" y="517" width="12.3052%" height="15" fill="rgb(215,208,19)"/><text x="56.7524%" y="527.50">rusqlite::statemen..</text></g><g><title>rusqlite::statement::Statement::bind_parameter (370 samples, 11.76%)</title><rect x="57.0429%" y="501" width="11.7647%" height="15" fill="rgb(236,175,2)"/><text x="57.2929%" y="511.50">rusqlite::stateme..</text></g><g><title>sqlite3_bind_text (5 samples, 0.16%)</title><rect x="68.6486%" y="485" width="0.1590%" height="15" fill="rgb(241,52,2)"/><text x="68.8986%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (4 samples, 0.13%)</title><rect x="69.0620%" y="501" width="0.1272%" height="15" fill="rgb(248,140,14)"/><text x="69.3120%" y="511.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (4 samples, 0.13%)</title><rect x="69.0620%" y="485" width="0.1272%" height="15" fill="rgb(253,22,42)"/><text x="69.3120%" y="495.50"></text></g><g><title>core::cell::BorrowRefMut::new (4 samples, 0.13%)</title><rect x="69.0620%" y="469" width="0.1272%" height="15" fill="rgb(234,61,47)"/><text x="69.3120%" y="479.50"></text></g><g><title>rusqlite::Connection::changes (8 samples, 0.25%)</title><rect x="69.0620%" y="517" width="0.2544%" height="15" fill="rgb(208,226,15)"/><text x="69.3120%" y="527.50"></text></g><g><title>rusqlite::inner_connection::InnerConnection::changes (4 samples, 0.13%)</title><rect x="69.1892%" y="501" width="0.1272%" height="15" fill="rgb(217,221,4)"/><text x="69.4392%" y="511.50"></text></g><g><title>sqlite3_changes (4 samples, 0.13%)</title><rect x="69.1892%" y="485" width="0.1272%" height="15" fill="rgb(212,174,34)"/><text x="69.4392%" y="495.50"></text></g><g><title>rusqlite::raw_statement::RawStatement::reset (44 samples, 1.40%)</title><rect x="69.3164%" y="517" width="1.3990%" height="15" fill="rgb(253,83,4)"/><text x="69.5664%" y="527.50"></text></g><g><title>sqlite3_reset (43 samples, 1.37%)</title><rect x="69.3482%" y="501" width="1.3672%" height="15" fill="rgb(250,195,49)"/><text x="69.5982%" y="511.50"></text></g><g><title>[libsqlite3.so.0.8.6] (29 samples, 0.92%)</title><rect x="69.7933%" y="485" width="0.9221%" height="15" fill="rgb(241,192,25)"/><text x="70.0433%" y="495.50"></text></g><g><title>[libsqlite3.so.0.8.6] (12 samples, 0.38%)</title><rect x="70.3339%" y="469" width="0.3816%" height="15" fill="rgb(208,124,10)"/><text x="70.5839%" y="479.50"></text></g><g><title>[unknown] (10 samples, 0.32%)</title><rect x="93.9269%" y="277" width="0.3180%" height="15" fill="rgb(222,33,0)"/><text x="94.1769%" y="287.50"></text></g><g><title>[unknown] (8 samples, 0.25%)</title><rect x="93.9905%" y="261" width="0.2544%" height="15" fill="rgb(234,209,28)"/><text x="94.2405%" y="271.50"></text></g><g><title>[unknown] (7 samples, 0.22%)</title><rect x="94.0223%" y="245" width="0.2226%" height="15" fill="rgb(224,11,23)"/><text x="94.2723%" y="255.50"></text></g><g><title>[unknown] (7 samples, 0.22%)</title><rect x="94.0223%" y="229" width="0.2226%" height="15" fill="rgb(232,99,1)"/><text x="94.2723%" y="239.50"></text></g><g><title>[unknown] (7 samples, 0.22%)</title><rect x="94.0223%" y="213" width="0.2226%" height="15" fill="rgb(237,95,45)"/><text x="94.2723%" y="223.50"></text></g><g><title>[unknown] (7 samples, 0.22%)</title><rect x="94.0223%" y="197" width="0.2226%" height="15" fill="rgb(208,109,11)"/><text x="94.2723%" y="207.50"></text></g><g><title>[unknown] (7 samples, 0.22%)</title><rect x="94.0223%" y="181" width="0.2226%" height="15" fill="rgb(216,190,48)"/><text x="94.2723%" y="191.50"></text></g><g><title>[unknown] (7 samples, 0.22%)</title><rect x="94.0223%" y="165" width="0.2226%" height="15" fill="rgb(251,171,36)"/><text x="94.2723%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.19%)</title><rect x="94.0541%" y="149" width="0.1908%" height="15" fill="rgb(230,62,22)"/><text x="94.3041%" y="159.50"></text></g><g><title>[unknown] (6 samples, 0.19%)</title><rect x="94.0541%" y="133" width="0.1908%" height="15" fill="rgb(225,114,35)"/><text x="94.3041%" y="143.50"></text></g><g><title>[unknown] (6 samples, 0.19%)</title><rect x="94.0541%" y="117" width="0.1908%" height="15" fill="rgb(215,118,42)"/><text x="94.3041%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="94.2130%" y="101" width="0.0318%" height="15" fill="rgb(243,119,21)"/><text x="94.4630%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="94.2130%" y="85" width="0.0318%" height="15" fill="rgb(252,177,53)"/><text x="94.4630%" y="95.50"></text></g><g><title>[libsqlite3.so.0.8.6] (17 samples, 0.54%)</title><rect x="93.7679%" y="325" width="0.5405%" height="15" fill="rgb(237,209,29)"/><text x="94.0179%" y="335.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.54%)</title><rect x="93.7679%" y="309" width="0.5405%" height="15" fill="rgb(212,65,23)"/><text x="94.0179%" y="319.50"></text></g><g><title>_int_malloc (17 samples, 0.54%)</title><rect x="93.7679%" y="293" width="0.5405%" height="15" fill="rgb(230,222,46)"/><text x="94.0179%" y="303.50"></text></g><g><title>sysmalloc (2 samples, 0.06%)</title><rect x="94.2448%" y="277" width="0.0636%" height="15" fill="rgb(215,135,32)"/><text x="94.4948%" y="287.50"></text></g><g><title>__GI___default_morecore (2 samples, 0.06%)</title><rect x="94.2448%" y="261" width="0.0636%" height="15" fill="rgb(246,101,22)"/><text x="94.4948%" y="271.50"></text></g><g><title>__GI___sbrk (2 samples, 0.06%)</title><rect x="94.2448%" y="245" width="0.0636%" height="15" fill="rgb(206,107,13)"/><text x="94.4948%" y="255.50"></text></g><g><title>__GI___sbrk (2 samples, 0.06%)</title><rect x="94.2448%" y="229" width="0.0636%" height="15" fill="rgb(250,100,44)"/><text x="94.4948%" y="239.50"></text></g><g><title>__brk (2 samples, 0.06%)</title><rect x="94.2448%" y="213" width="0.0636%" height="15" fill="rgb(231,147,38)"/><text x="94.4948%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="94.2448%" y="197" width="0.0636%" height="15" fill="rgb(229,8,40)"/><text x="94.4948%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="94.2448%" y="181" width="0.0636%" height="15" fill="rgb(221,135,30)"/><text x="94.4948%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="94.2448%" y="165" width="0.0636%" height="15" fill="rgb(249,193,18)"/><text x="94.4948%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="94.2448%" y="149" width="0.0636%" height="15" fill="rgb(209,133,39)"/><text x="94.4948%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="94.2766%" y="133" width="0.0318%" height="15" fill="rgb(232,100,14)"/><text x="94.5266%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="94.2766%" y="117" width="0.0318%" height="15" fill="rgb(224,185,1)"/><text x="94.5266%" y="127.50"></text></g><g><title>[libsqlite3.so.0.8.6] (20 samples, 0.64%)</title><rect x="93.7043%" y="389" width="0.6359%" height="15" fill="rgb(223,139,8)"/><text x="93.9543%" y="399.50"></text></g><g><title>[libsqlite3.so.0.8.6] (19 samples, 0.60%)</title><rect x="93.7361%" y="373" width="0.6041%" height="15" fill="rgb(232,213,38)"/><text x="93.9861%" y="383.50"></text></g><g><title>[libsqlite3.so.0.8.6] (18 samples, 0.57%)</title><rect x="93.7679%" y="357" width="0.5723%" height="15" fill="rgb(207,94,22)"/><text x="94.0179%" y="367.50"></text></g><g><title>[libsqlite3.so.0.8.6] (18 samples, 0.57%)</title><rect x="93.7679%" y="341" width="0.5723%" height="15" fill="rgb(219,183,54)"/><text x="94.0179%" y="351.50"></text></g><g><title>__GI___pthread_mutex_lock (1 samples, 0.03%)</title><rect x="94.3084%" y="325" width="0.0318%" height="15" fill="rgb(216,185,54)"/><text x="94.5584%" y="335.50"></text></g><g><title>[libsqlite3.so.0.8.6] (99 samples, 3.15%)</title><rect x="91.4467%" y="405" width="3.1479%" height="15" fill="rgb(254,217,39)"/><text x="91.6967%" y="415.50">[li..</text></g><g><title>__GI___libc_malloc (8 samples, 0.25%)</title><rect x="94.3402%" y="389" width="0.2544%" height="15" fill="rgb(240,178,23)"/><text x="94.5902%" y="399.50"></text></g><g><title>tcache_get (4 samples, 0.13%)</title><rect x="94.4674%" y="373" width="0.1272%" height="15" fill="rgb(218,11,47)"/><text x="94.7174%" y="383.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.29%)</title><rect x="94.5946%" y="405" width="0.2862%" height="15" fill="rgb(218,51,51)"/><text x="94.8446%" y="415.50"></text></g><g><title>tcache_get (5 samples, 0.16%)</title><rect x="94.7218%" y="389" width="0.1590%" height="15" fill="rgb(238,126,27)"/><text x="94.9718%" y="399.50"></text></g><g><title>__GI___pthread_mutex_lock (17 samples, 0.54%)</title><rect x="94.8808%" y="405" width="0.5405%" height="15" fill="rgb(249,202,22)"/><text x="95.1308%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (6 samples, 0.19%)</title><rect x="95.4213%" y="405" width="0.1908%" height="15" fill="rgb(254,195,49)"/><text x="95.6713%" y="415.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (6 samples, 0.19%)</title><rect x="95.4213%" y="389" width="0.1908%" height="15" fill="rgb(208,123,14)"/><text x="95.6713%" y="399.50"></text></g><g><title>[libsqlite3.so.0.8.6] (174 samples, 5.53%)</title><rect x="90.1113%" y="421" width="5.5326%" height="15" fill="rgb(224,200,8)"/><text x="90.3613%" y="431.50">[libsql..</text></g><g><title>sqlite3_mutex_leave (1 samples, 0.03%)</title><rect x="95.6121%" y="405" width="0.0318%" height="15" fill="rgb(217,61,36)"/><text x="95.8621%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="95.6439%" y="421" width="0.0636%" height="15" fill="rgb(206,35,45)"/><text x="95.8939%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="95.6439%" y="405" width="0.0636%" height="15" fill="rgb(217,65,33)"/><text x="95.8939%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="95.6439%" y="389" width="0.0636%" height="15" fill="rgb(222,158,48)"/><text x="95.8939%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="95.6439%" y="373" width="0.0636%" height="15" fill="rgb(254,2,54)"/><text x="95.8939%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="95.6439%" y="357" width="0.0636%" height="15" fill="rgb(250,143,38)"/><text x="95.8939%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="95.6439%" y="341" width="0.0636%" height="15" fill="rgb(248,25,0)"/><text x="95.8939%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="95.6439%" y="325" width="0.0636%" height="15" fill="rgb(206,152,27)"/><text x="95.8939%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="95.6439%" y="309" width="0.0636%" height="15" fill="rgb(240,77,30)"/><text x="95.8939%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="95.6439%" y="293" width="0.0636%" height="15" fill="rgb(231,5,3)"/><text x="95.8939%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="95.6439%" y="277" width="0.0636%" height="15" fill="rgb(207,226,32)"/><text x="95.8939%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="95.6439%" y="261" width="0.0636%" height="15" fill="rgb(222,207,47)"/><text x="95.8939%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="95.6757%" y="245" width="0.0318%" height="15" fill="rgb(229,115,45)"/><text x="95.9257%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="95.6757%" y="229" width="0.0318%" height="15" fill="rgb(224,191,6)"/><text x="95.9257%" y="239.50"></text></g><g><title>__GI___pthread_mutex_lock (4 samples, 0.13%)</title><rect x="95.7075%" y="421" width="0.1272%" height="15" fill="rgb(230,227,24)"/><text x="95.9575%" y="431.50"></text></g><g><title>__GI___pthread_mutex_unlock (3 samples, 0.10%)</title><rect x="95.8347%" y="421" width="0.0954%" height="15" fill="rgb(228,80,19)"/><text x="96.0847%" y="431.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (3 samples, 0.10%)</title><rect x="95.8347%" y="405" width="0.0954%" height="15" fill="rgb(247,229,0)"/><text x="96.0847%" y="415.50"></text></g><g><title>[libsqlite3.so.0.8.6] (273 samples, 8.68%)</title><rect x="87.2814%" y="437" width="8.6804%" height="15" fill="rgb(237,194,15)"/><text x="87.5314%" y="447.50">[libsqlite3...</text></g><g><title>sqlite3_mutex_leave (1 samples, 0.03%)</title><rect x="95.9300%" y="421" width="0.0318%" height="15" fill="rgb(219,203,20)"/><text x="96.1800%" y="431.50"></text></g><g><title>__GI___pthread_mutex_unlock (15 samples, 0.48%)</title><rect x="95.9618%" y="437" width="0.4769%" height="15" fill="rgb(234,128,8)"/><text x="96.2118%" y="447.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (10 samples, 0.32%)</title><rect x="96.1208%" y="421" width="0.3180%" height="15" fill="rgb(248,202,8)"/><text x="96.3708%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned (3 samples, 0.10%)</title><rect x="96.4388%" y="437" width="0.0954%" height="15" fill="rgb(206,104,37)"/><text x="96.6888%" y="447.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.19%)</title><rect x="96.5342%" y="437" width="0.1908%" height="15" fill="rgb(223,8,27)"/><text x="96.7842%" y="447.50"></text></g><g><title>[libsqlite3.so.0.8.6] (6 samples, 0.19%)</title><rect x="97.1383%" y="421" width="0.1908%" height="15" fill="rgb(216,217,28)"/><text x="97.3883%" y="431.50"></text></g><g><title>__GI___libc_free (12 samples, 0.38%)</title><rect x="97.3291%" y="421" width="0.3816%" height="15" fill="rgb(249,199,1)"/><text x="97.5791%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (18 samples, 0.57%)</title><rect x="97.7107%" y="421" width="0.5723%" height="15" fill="rgb(240,85,17)"/><text x="97.9607%" y="431.50"></text></g><g><title>_int_free (19 samples, 0.60%)</title><rect x="98.2830%" y="421" width="0.6041%" height="15" fill="rgb(206,108,45)"/><text x="98.5330%" y="431.50"></text></g><g><title>tcache_put (3 samples, 0.10%)</title><rect x="98.7917%" y="405" width="0.0954%" height="15" fill="rgb(245,210,41)"/><text x="99.0417%" y="415.50"></text></g><g><title>sqlite3_free (70 samples, 2.23%)</title><rect x="96.7250%" y="437" width="2.2258%" height="15" fill="rgb(206,13,37)"/><text x="96.9750%" y="447.50">s..</text></g><g><title>sqlite3_mutex_enter (2 samples, 0.06%)</title><rect x="98.8871%" y="421" width="0.0636%" height="15" fill="rgb(250,61,18)"/><text x="99.1371%" y="431.50"></text></g><g><title>[libsqlite3.so.0.8.6] (508 samples, 16.15%)</title><rect x="82.8299%" y="453" width="16.1526%" height="15" fill="rgb(235,172,48)"/><text x="83.0799%" y="463.50">[libsqlite3.so.0.8.6]</text></g><g><title>sqlite3_mutex_leave (1 samples, 0.03%)</title><rect x="98.9507%" y="437" width="0.0318%" height="15" fill="rgb(249,201,17)"/><text x="99.2007%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.03%)</title><rect x="98.9825%" y="453" width="0.0318%" height="15" fill="rgb(219,208,6)"/><text x="99.2325%" y="463.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.10%)</title><rect x="99.0143%" y="453" width="0.0954%" height="15" fill="rgb(248,31,23)"/><text x="99.2643%" y="463.50"></text></g><g><title>__memset_avx2_unaligned (3 samples, 0.10%)</title><rect x="99.1097%" y="453" width="0.0954%" height="15" fill="rgb(245,15,42)"/><text x="99.3597%" y="463.50"></text></g><g><title>[libsqlite3.so.0.8.6] (672 samples, 21.37%)</title><rect x="77.8696%" y="469" width="21.3672%" height="15" fill="rgb(222,217,39)"/><text x="78.1196%" y="479.50">[libsqlite3.so.0.8.6]</text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.03%)</title><rect x="99.2051%" y="453" width="0.0318%" height="15" fill="rgb(210,219,27)"/><text x="99.4551%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.2369%" y="469" width="0.0318%" height="15" fill="rgb(252,166,36)"/><text x="99.4869%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.2369%" y="453" width="0.0318%" height="15" fill="rgb(245,132,34)"/><text x="99.4869%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.2369%" y="437" width="0.0318%" height="15" fill="rgb(236,54,3)"/><text x="99.4869%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.2369%" y="421" width="0.0318%" height="15" fill="rgb(241,173,43)"/><text x="99.4869%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.2369%" y="405" width="0.0318%" height="15" fill="rgb(215,190,9)"/><text x="99.4869%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.2369%" y="389" width="0.0318%" height="15" fill="rgb(242,101,16)"/><text x="99.4869%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.2369%" y="373" width="0.0318%" height="15" fill="rgb(223,190,21)"/><text x="99.4869%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.2369%" y="357" width="0.0318%" height="15" fill="rgb(215,228,25)"/><text x="99.4869%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.2369%" y="341" width="0.0318%" height="15" fill="rgb(225,36,22)"/><text x="99.4869%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.2369%" y="325" width="0.0318%" height="15" fill="rgb(251,106,46)"/><text x="99.4869%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.2369%" y="309" width="0.0318%" height="15" fill="rgb(208,90,1)"/><text x="99.4869%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.2369%" y="293" width="0.0318%" height="15" fill="rgb(243,10,4)"/><text x="99.4869%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.2369%" y="277" width="0.0318%" height="15" fill="rgb(212,137,27)"/><text x="99.4869%" y="287.50"></text></g><g><title>__memcpy_avx_unaligned (3 samples, 0.10%)</title><rect x="99.2687%" y="469" width="0.0954%" height="15" fill="rgb(231,220,49)"/><text x="99.5187%" y="479.50"></text></g><g><title>__libc_start_main (3,108 samples, 98.82%)</title><rect x="0.7313%" y="741" width="98.8235%" height="15" fill="rgb(237,96,20)"/><text x="0.9813%" y="751.50">__libc_start_main</text></g><g><title>main (3,108 samples, 98.82%)</title><rect x="0.7313%" y="725" width="98.8235%" height="15" fill="rgb(239,229,30)"/><text x="0.9813%" y="735.50">main</text></g><g><title>std::rt::lang_start_internal (3,108 samples, 98.82%)</title><rect x="0.7313%" y="709" width="98.8235%" height="15" fill="rgb(219,65,33)"/><text x="0.9813%" y="719.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (3,108 samples, 98.82%)</title><rect x="0.7313%" y="693" width="98.8235%" height="15" fill="rgb(243,134,7)"/><text x="0.9813%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,108 samples, 98.82%)</title><rect x="0.7313%" y="677" width="98.8235%" height="15" fill="rgb(216,177,54)"/><text x="0.9813%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,108 samples, 98.82%)</title><rect x="0.7313%" y="661" width="98.8235%" height="15" fill="rgb(211,160,20)"/><text x="0.9813%" y="671.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3,108 samples, 98.82%)</title><rect x="0.7313%" y="645" width="98.8235%" height="15" fill="rgb(239,85,39)"/><text x="0.9813%" y="655.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (3,108 samples, 98.82%)</title><rect x="0.7313%" y="629" width="98.8235%" height="15" fill="rgb(232,125,22)"/><text x="0.9813%" y="639.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,108 samples, 98.82%)</title><rect x="0.7313%" y="613" width="98.8235%" height="15" fill="rgb(244,57,34)"/><text x="0.9813%" y="623.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (3,108 samples, 98.82%)</title><rect x="0.7313%" y="597" width="98.8235%" height="15" fill="rgb(214,203,32)"/><text x="0.9813%" y="607.50">core::ops::function::FnOnce::call_once</text></g><g><title>qsv::main (3,108 samples, 98.82%)</title><rect x="0.7313%" y="581" width="98.8235%" height="15" fill="rgb(207,58,43)"/><text x="0.9813%" y="591.50">qsv::main</text></g><g><title>qsv::db::Db::insert (1,382 samples, 43.94%)</title><rect x="55.6121%" y="565" width="43.9428%" height="15" fill="rgb(215,193,15)"/><text x="55.8621%" y="575.50">qsv::db::Db::insert</text></g><g><title>rusqlite::statement::Statement::execute (1,366 samples, 43.43%)</title><rect x="56.1208%" y="549" width="43.4340%" height="15" fill="rgb(232,15,44)"/><text x="56.3708%" y="559.50">rusqlite::statement::Statement::execute</text></g><g><title>rusqlite::statement::Statement::execute_with_bound_parameters (967 samples, 30.75%)</title><rect x="68.8076%" y="533" width="30.7472%" height="15" fill="rgb(212,3,48)"/><text x="69.0576%" y="543.50">rusqlite::statement::Statement::execute_with_bound..</text></g><g><title>rusqlite::raw_statement::RawStatement::step (907 samples, 28.84%)</title><rect x="70.7154%" y="517" width="28.8394%" height="15" fill="rgb(218,128,7)"/><text x="70.9654%" y="527.50">rusqlite::raw_statement::RawStatement::step</text></g><g><title>sqlite3_step (907 samples, 28.84%)</title><rect x="70.7154%" y="501" width="28.8394%" height="15" fill="rgb(226,216,39)"/><text x="70.9654%" y="511.50">sqlite3_step</text></g><g><title>[libsqlite3.so.0.8.6] (866 samples, 27.54%)</title><rect x="72.0191%" y="485" width="27.5358%" height="15" fill="rgb(243,47,51)"/><text x="72.2691%" y="495.50">[libsqlite3.so.0.8.6]</text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.19%)</title><rect x="99.3641%" y="469" width="0.1908%" height="15" fill="rgb(241,183,40)"/><text x="99.6141%" y="479.50"></text></g><g><title>all (3,145 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(231,217,32)"/><text x="0.2500%" y="799.50"></text></g><g><title>qsv (3,143 samples, 99.94%)</title><rect x="0.0636%" y="773" width="99.9364%" height="15" fill="rgb(229,61,38)"/><text x="0.3136%" y="783.50">qsv</text></g><g><title>_start (3,122 samples, 99.27%)</title><rect x="0.7313%" y="757" width="99.2687%" height="15" fill="rgb(225,210,5)"/><text x="0.9813%" y="767.50">_start</text></g><g><title>_dl_start (14 samples, 0.45%)</title><rect x="99.5548%" y="741" width="0.4452%" height="15" fill="rgb(231,79,45)"/><text x="99.8048%" y="751.50"></text></g><g><title>_dl_start_final (14 samples, 0.45%)</title><rect x="99.5548%" y="725" width="0.4452%" height="15" fill="rgb(224,100,7)"/><text x="99.8048%" y="735.50"></text></g><g><title>_dl_sysdep_start (14 samples, 0.45%)</title><rect x="99.5548%" y="709" width="0.4452%" height="15" fill="rgb(241,198,18)"/><text x="99.8048%" y="719.50"></text></g><g><title>dl_main (14 samples, 0.45%)</title><rect x="99.5548%" y="693" width="0.4452%" height="15" fill="rgb(252,97,53)"/><text x="99.8048%" y="703.50"></text></g><g><title>_dl_map_object_deps (14 samples, 0.45%)</title><rect x="99.5548%" y="677" width="0.4452%" height="15" fill="rgb(220,88,7)"/><text x="99.8048%" y="687.50"></text></g><g><title>_dl_catch_exception (14 samples, 0.45%)</title><rect x="99.5548%" y="661" width="0.4452%" height="15" fill="rgb(213,176,14)"/><text x="99.8048%" y="671.50"></text></g><g><title>openaux (14 samples, 0.45%)</title><rect x="99.5548%" y="645" width="0.4452%" height="15" fill="rgb(246,73,7)"/><text x="99.8048%" y="655.50"></text></g><g><title>_dl_map_object (14 samples, 0.45%)</title><rect x="99.5548%" y="629" width="0.4452%" height="15" fill="rgb(245,64,36)"/><text x="99.8048%" y="639.50"></text></g><g><title>_dl_map_object_from_fd (14 samples, 0.45%)</title><rect x="99.5548%" y="613" width="0.4452%" height="15" fill="rgb(245,80,10)"/><text x="99.8048%" y="623.50"></text></g><g><title>_dl_map_segments (14 samples, 0.45%)</title><rect x="99.5548%" y="597" width="0.4452%" height="15" fill="rgb(232,107,50)"/><text x="99.8048%" y="607.50"></text></g><g><title>memset (14 samples, 0.45%)</title><rect x="99.5548%" y="581" width="0.4452%" height="15" fill="rgb(253,3,0)"/><text x="99.8048%" y="591.50"></text></g><g><title>[unknown] (14 samples, 0.45%)</title><rect x="99.5548%" y="565" width="0.4452%" height="15" fill="rgb(212,99,53)"/><text x="99.8048%" y="575.50"></text></g><g><title>[unknown] (14 samples, 0.45%)</title><rect x="99.5548%" y="549" width="0.4452%" height="15" fill="rgb(249,111,54)"/><text x="99.8048%" y="559.50"></text></g><g><title>[unknown] (14 samples, 0.45%)</title><rect x="99.5548%" y="533" width="0.4452%" height="15" fill="rgb(249,55,30)"/><text x="99.8048%" y="543.50"></text></g><g><title>[unknown] (14 samples, 0.45%)</title><rect x="99.5548%" y="517" width="0.4452%" height="15" fill="rgb(237,47,42)"/><text x="99.8048%" y="527.50"></text></g><g><title>[unknown] (14 samples, 0.45%)</title><rect x="99.5548%" y="501" width="0.4452%" height="15" fill="rgb(211,20,18)"/><text x="99.8048%" y="511.50"></text></g><g><title>[unknown] (14 samples, 0.45%)</title><rect x="99.5548%" y="485" width="0.4452%" height="15" fill="rgb(231,203,46)"/><text x="99.8048%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="99.9364%" y="469" width="0.0636%" height="15" fill="rgb(237,142,3)"/><text x="100.1864%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="99.9364%" y="453" width="0.0636%" height="15" fill="rgb(241,107,1)"/><text x="100.1864%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="99.9364%" y="437" width="0.0636%" height="15" fill="rgb(229,83,13)"/><text x="100.1864%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="99.9364%" y="421" width="0.0636%" height="15" fill="rgb(241,91,40)"/><text x="100.1864%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="99.9364%" y="405" width="0.0636%" height="15" fill="rgb(225,3,45)"/><text x="100.1864%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="99.9364%" y="389" width="0.0636%" height="15" fill="rgb(244,223,14)"/><text x="100.1864%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="99.9364%" y="373" width="0.0636%" height="15" fill="rgb(224,124,37)"/><text x="100.1864%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9682%" y="357" width="0.0318%" height="15" fill="rgb(251,171,30)"/><text x="100.2182%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9682%" y="341" width="0.0318%" height="15" fill="rgb(236,46,54)"/><text x="100.2182%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9682%" y="325" width="0.0318%" height="15" fill="rgb(245,213,5)"/><text x="100.2182%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9682%" y="309" width="0.0318%" height="15" fill="rgb(230,144,27)"/><text x="100.2182%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9682%" y="293" width="0.0318%" height="15" fill="rgb(220,86,6)"/><text x="100.2182%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9682%" y="277" width="0.0318%" height="15" fill="rgb(240,20,13)"/><text x="100.2182%" y="287.50"></text></g></svg></svg>